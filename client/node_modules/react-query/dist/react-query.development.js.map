{"version":3,"file":"react-query.development.js","sources":["../src/core/types.ts","../src/core/utils.ts","../src/core/config.ts","../src/core/queryObserver.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/setFocusHandler.ts","../src/core/setOnlineHandler.ts","../src/react/ReactQueryCacheProvider.tsx","../src/react/ReactQueryConfigProvider.tsx","../src/react/utils.ts","../src/react/useIsFetching.ts","../src/react/useDefaultedMutationConfig.tsx","../src/react/useMutation.ts","../src/react/useDefaultedQueryConfig.tsx","../src/react/useBaseQuery.ts","../src/react/useQuery.ts","../src/react/usePaginatedQuery.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["import type { Query, FetchMoreOptions, RefetchOptions } from './query'\nimport type { QueryCache } from './queryCache'\n\nexport type QueryKey =\n  | boolean\n  | null\n  | number\n  | object\n  | string\n  | undefined\n  | { [key: number]: QueryKey }\n  | { [key: string]: QueryKey }\n  | readonly QueryKey[]\n\nexport type ArrayQueryKey = QueryKey[]\n\nexport type QueryFunction<TResult> = (\n  ...args: any[]\n) => TResult | Promise<TResult>\n\nexport type TypedQueryFunction<\n  TResult,\n  TArgs extends TypedQueryFunctionArgs = TypedQueryFunctionArgs\n> = (...args: TArgs) => TResult | Promise<TResult>\n\nexport type TypedQueryFunctionArgs = readonly [unknown, ...unknown[]]\n\nexport type InitialDataFunction<TResult> = () => TResult | undefined\n\nexport type InitialStaleFunction = () => boolean\n\nexport type QueryKeySerializerFunction = (\n  queryKey: QueryKey\n) => [string, QueryKey[]]\n\nexport interface BaseQueryConfig<TResult, TError = unknown, TData = TResult> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: boolean | number | ((failureCount: number, error: TError) => boolean)\n  retryDelay?: number | ((retryAttempt: number) => number)\n  staleTime?: number\n  cacheTime?: number\n  isDataEqual?: (oldData: unknown, newData: unknown) => boolean\n  queryFn?: QueryFunction<TData>\n  queryKey?: QueryKey\n  queryKeySerializerFn?: QueryKeySerializerFunction\n  queryFnParamsFilter?: (args: ArrayQueryKey) => ArrayQueryKey\n  initialData?: TResult | InitialDataFunction<TResult>\n  initialStale?: boolean | InitialStaleFunction\n  infinite?: true\n  /**\n   * Set this to `false` to disable structural sharing between query results.\n   * Defaults to `true`.\n   */\n  structuralSharing?: boolean\n  /**\n   * This function can be set to automatically get the next cursor for infinite queries.\n   * The result will also be used to determine the value of `canFetchMore`.\n   */\n  getFetchMore?: (lastPage: TData, allPages: TData[]) => unknown\n}\n\nexport interface QueryObserverConfig<\n  TResult,\n  TError = unknown,\n  TData = TResult\n> extends BaseQueryConfig<TResult, TError, TData> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   * Defaults to `true`.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If set to a number, the query will continuously refetch at this frequency in milliseconds.\n   * Defaults to `false`.\n   */\n  refetchInterval?: number | false\n  /**\n   * If set to `true`, the query will continue to refetch while their tab/window is in the background.\n   * Defaults to `false`.\n   */\n  refetchIntervalInBackground?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on window focus for this query.\n   * Defaults to `true`.\n   */\n  refetchOnWindowFocus?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on reconnect for this query.\n   * Defaults to `true`.\n   */\n  refetchOnReconnect?: boolean\n  /**\n   * If set to `false`, will disable additional instances of a query to trigger background refetches.\n   * Defaults to `true`.\n   */\n  refetchOnMount?: boolean\n  /**\n   * Whether a change to the query status should re-render a component.\n   * If set to `false`, the component will only re-render when the actual `data` or `error` changes.\n   * Defaults to `true`.\n   */\n  notifyOnStatusChange?: boolean\n  /**\n   * This callback will fire any time the query successfully fetches new data.\n   */\n  onSuccess?: (data: TResult) => void\n  /**\n   * This callback will fire if the query encounters an error and will be passed the error.\n   */\n  onError?: (err: TError) => void\n  /**\n   * This callback will fire any time the query is either successfully fetched or errors and be passed either the data or error.\n   */\n  onSettled?: (data: TResult | undefined, error: TError | null) => void\n  /**\n   * Whether errors should be thrown instead of setting the `error` property.\n   * Defaults to `false`.\n   */\n  useErrorBoundary?: boolean\n  /**\n   * If set to `true`, the query will suspend when `status === 'loading'`\n   * and throw errors when `status === 'error'`.\n   * Defaults to `false`.\n   */\n  suspense?: boolean\n  /**\n   * Set this to `true` to keep the previous `data` when fetching based on a new query key.\n   * Defaults to `false`.\n   */\n  keepPreviousData?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport interface QueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface PaginatedQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface InfiniteQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult[], TError, TResult> {}\n\nexport type IsFetchingMoreValue = 'previous' | 'next' | false\n\nexport enum QueryStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport interface QueryResultBase<TResult, TError = unknown> {\n  canFetchMore: boolean | undefined\n  clear: () => void\n  data: TResult | undefined\n  error: TError | null\n  failureCount: number\n  fetchMore: (\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ) => Promise<TResult | undefined>\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore?: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  query: Query<TResult, TError>\n  refetch: (options?: RefetchOptions) => Promise<TResult | undefined>\n  status: QueryStatus\n  updatedAt: number\n}\n\nexport interface QueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {}\n\nexport interface PaginatedQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  resolvedData: TResult | undefined\n  latestData: TResult | undefined\n}\n\nexport interface InfiniteQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult[], TError> {}\n\nexport interface MutateConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> {\n  onSuccess?: (data: TResult, variables: TVariables) => Promise<void> | void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    snapshotValue: TSnapshot\n  ) => Promise<void> | void\n  onSettled?: (\n    data: undefined | TResult,\n    error: TError | null,\n    variables: TVariables,\n    snapshotValue?: TSnapshot\n  ) => Promise<void> | void\n  throwOnError?: boolean\n}\n\nexport interface MutationConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutateConfig<TResult, TError, TVariables, TSnapshot> {\n  onMutate?: (variables: TVariables) => Promise<TSnapshot> | TSnapshot\n  useErrorBoundary?: boolean\n  suspense?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport type MutationFunction<TResult, TVariables = unknown> = (\n  variables: TVariables\n) => Promise<TResult>\n\nexport type MutateFunction<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> = (\n  variables?: TVariables,\n  config?: MutateConfig<TResult, TError, TVariables, TSnapshot>\n) => Promise<TResult | undefined>\n\nexport type MutationResultPair<TResult, TError, TVariables, TSnapshot> = [\n  MutateFunction<TResult, TError, TVariables, TSnapshot>,\n  MutationResult<TResult, TError>\n]\n\nexport interface MutationResult<TResult, TError = unknown> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  reset: () => void\n}\n\nexport interface ReactQueryConfig<TResult = unknown, TError = unknown> {\n  queries?: ReactQueryQueriesConfig<TResult, TError>\n  shared?: ReactQuerySharedConfig\n  mutations?: ReactQueryMutationsConfig<TResult, TError>\n}\n\nexport interface ReactQuerySharedConfig {\n  suspense?: boolean\n}\n\nexport interface ReactQueryQueriesConfig<TResult, TError>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface ReactQueryMutationsConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutationConfig<TResult, TError, TVariables, TSnapshot> {}\n","import { QueryConfig, QueryStatus, QueryKey, QueryFunction } from './types'\n\n// TYPES\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\ntype ConsoleFunction = (...args: any[]) => void\n\nexport interface ConsoleObject {\n  log: ConsoleFunction\n  warn: ConsoleFunction\n  error: ConsoleFunction\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport class CancelledError {}\n\n// UTILS\n\nlet _uid = 0\nexport const uid = () => _uid++\n\nexport const isServer = typeof window === 'undefined'\n\nfunction noop(): void {\n  return void 0\n}\n\nexport let Console: ConsoleObject = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function setConsole(c: ConsoleObject) {\n  Console = c\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nfunction stableStringifyReplacer(_key: string, value: any): unknown {\n  if (typeof value === 'function') {\n    throw new Error('Cannot stringify non JSON value')\n  }\n\n  if (isObject(value)) {\n    return Object.keys(value)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = value[key]\n        return result\n      }, {} as any)\n  }\n\n  return value\n}\n\nexport function stableStringify(value: any): string {\n  return JSON.stringify(value, stableStringifyReplacer)\n}\n\nexport function deepIncludes(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible(): boolean {\n  // document global can be unavailable in react native\n  if (typeof document === 'undefined') {\n    return true\n  }\n  return [undefined, 'visible', 'prerender'].includes(document.visibilityState)\n}\n\nexport function isOnline(): boolean {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  let queryKey: QueryKey\n  let queryFn: QueryFunction<TResult> | undefined\n  let config: QueryConfig<TResult, TError> | undefined\n  let options: TOptions\n\n  if (isObject(args[0])) {\n    queryKey = args[0].queryKey\n    queryFn = args[0].queryFn\n    config = args[0].config\n    options = args[1]\n  } else if (isObject(args[1])) {\n    queryKey = args[0]\n    config = args[1]\n    options = args[2]\n  } else {\n    queryKey = args[0]\n    queryFn = args[1]\n    config = args[2]\n    options = args[3]\n  }\n\n  config = config ? { queryKey, ...config } : { queryKey }\n\n  if (queryFn) {\n    config = { ...config, queryFn }\n  }\n\n  return [queryKey, config, options]\n}\n\nexport function deepEqual(a: any, b: any): boolean {\n  return replaceEqualDeep(a, b) === a\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\nexport function isObject(a: unknown): boolean {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === QueryStatus.Loading,\n    isSuccess: status === QueryStatus.Success,\n    isError: status === QueryStatus.Error,\n    isIdle: status === QueryStatus.Idle,\n  }\n}\n\nexport function createSetHandler(fn: () => void) {\n  let removePreviousHandler: (() => void) | void\n  return (callback: (handler: () => void) => void) => {\n    // Unsub the old handler\n    if (removePreviousHandler) {\n      removePreviousHandler()\n    }\n    // Sub the new handler\n    removePreviousHandler = callback(fn)\n  }\n}\n","import { stableStringify } from './utils'\nimport {\n  ArrayQueryKey,\n  QueryKey,\n  QueryKeySerializerFunction,\n  ReactQueryConfig,\n  QueryConfig,\n  MutationConfig,\n} from './types'\n\n// TYPES\n\nexport interface ReactQueryConfigRef {\n  current: ReactQueryConfig\n}\n\n// CONFIG\n\nexport const defaultQueryKeySerializerFn: QueryKeySerializerFunction = (\n  queryKey: QueryKey\n): [string, ArrayQueryKey] => {\n  try {\n    let arrayQueryKey: ArrayQueryKey = Array.isArray(queryKey)\n      ? queryKey\n      : [queryKey]\n    const queryHash = stableStringify(arrayQueryKey)\n    arrayQueryKey = JSON.parse(queryHash)\n    return [queryHash, arrayQueryKey]\n  } catch {\n    throw new Error('A valid query key is required!')\n  }\n}\n\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\nexport const DEFAULT_STALE_TIME = 0\nexport const DEFAULT_CACHE_TIME = 5 * 60 * 1000\nexport const DEFAULT_CONFIG: ReactQueryConfig = {\n  queries: {\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    enabled: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: DEFAULT_STALE_TIME,\n    cacheTime: DEFAULT_CACHE_TIME,\n    refetchOnWindowFocus: true,\n    refetchOnReconnect: true,\n    refetchOnMount: true,\n    notifyOnStatusChange: true,\n    structuralSharing: true,\n  },\n}\n\nexport function mergeReactQueryConfigs(\n  a: ReactQueryConfig,\n  b: ReactQueryConfig\n): ReactQueryConfig {\n  return {\n    shared: {\n      ...a.shared,\n      ...b.shared,\n    },\n    queries: {\n      ...a.queries,\n      ...b.queries,\n    },\n    mutations: {\n      ...a.mutations,\n      ...b.mutations,\n    },\n  }\n}\n\nexport function getDefaultedQueryConfig<TResult, TError>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: QueryConfig<TResult, TError>,\n  configOverrides?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.queries,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.queries,\n    ...contextConfig?.shared,\n    ...contextConfig?.queries,\n    ...config,\n    ...configOverrides,\n  } as QueryConfig<TResult, TError>\n}\n\nexport function getDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>,\n  configOverrides?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.mutations,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.mutations,\n    ...contextConfig?.shared,\n    ...contextConfig?.mutations,\n    ...config,\n    ...configOverrides,\n  } as MutationConfig<TResult, TError, TVariables, TSnapshot>\n}\n","import { getStatusProps, isServer, isDocumentVisible } from './utils'\nimport type { QueryResult, QueryObserverConfig } from './types'\nimport type {\n  Query,\n  QueryState,\n  Action,\n  FetchMoreOptions,\n  RefetchOptions,\n} from './query'\nimport type { QueryCache } from './queryCache'\n\nexport type UpdateListener<TResult, TError> = (\n  result: QueryResult<TResult, TError>\n) => void\n\nexport class QueryObserver<TResult, TError> {\n  config: QueryObserverConfig<TResult, TError>\n\n  private queryCache: QueryCache\n  private currentQuery!: Query<TResult, TError>\n  private currentResult!: QueryResult<TResult, TError>\n  private previousResult?: QueryResult<TResult, TError>\n  private updateListener?: UpdateListener<TResult, TError>\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private started?: boolean\n\n  constructor(config: QueryObserverConfig<TResult, TError>) {\n    this.config = config\n    this.queryCache = config.queryCache!\n\n    // Bind exposed methods\n    this.clear = this.clear.bind(this)\n    this.refetch = this.refetch.bind(this)\n    this.fetchMore = this.fetchMore.bind(this)\n\n    // Subscribe to the query\n    this.updateQuery()\n  }\n\n  subscribe(listener?: UpdateListener<TResult, TError>): () => void {\n    this.started = true\n    this.updateListener = listener\n    this.currentQuery.subscribeObserver(this)\n    this.optionalFetch()\n    this.updateTimers()\n    return this.unsubscribe.bind(this)\n  }\n\n  unsubscribe(): void {\n    this.started = false\n    this.updateListener = undefined\n    this.clearTimers()\n    this.currentQuery.unsubscribeObserver(this)\n  }\n\n  updateConfig(config: QueryObserverConfig<TResult, TError>): void {\n    const prevConfig = this.config\n    this.config = config\n\n    const updated = this.updateQuery()\n\n    // Take no further actions if the observer did not start yet\n    if (!this.started) {\n      return\n    }\n\n    // If we subscribed to a new query, optionally fetch and update refetch\n    if (updated) {\n      this.optionalFetch()\n      this.updateTimers()\n      return\n    }\n\n    // Optionally fetch if the query became enabled\n    if (config.enabled && !prevConfig.enabled) {\n      this.optionalFetch()\n    }\n\n    // Update stale interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.staleTime !== prevConfig.staleTime\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.refetchInterval !== prevConfig.refetchInterval ||\n      config.refetchIntervalInBackground !==\n        prevConfig.refetchIntervalInBackground\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  isStale(): boolean {\n    return this.currentResult.isStale\n  }\n\n  getCurrentResult(): QueryResult<TResult, TError> {\n    return this.currentResult\n  }\n\n  clear(): void {\n    return this.currentQuery.clear()\n  }\n\n  async refetch(options?: RefetchOptions): Promise<TResult | undefined> {\n    return this.currentQuery.refetch(options, this.config)\n  }\n\n  async fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    return this.currentQuery.fetchMore(fetchMoreVariable, options, this.config)\n  }\n\n  async fetch(): Promise<TResult | undefined> {\n    try {\n      return await this.currentQuery.fetch(undefined, this.config)\n    } catch {\n      // ignore\n    }\n  }\n\n  private optionalFetch(): void {\n    if (\n      this.config.enabled && // Don't auto refetch if disabled\n      !(this.config.suspense && this.currentResult.isFetched) && // Don't refetch if in suspense mode and the data is already fetched\n      this.currentResult.isStale && // Only refetch if stale\n      (this.config.refetchOnMount || this.currentQuery.observers.length === 1)\n    ) {\n      this.fetch()\n    }\n  }\n\n  private updateIsStale(): void {\n    const isStale = this.currentQuery.isStaleByTime(this.config.staleTime)\n    if (isStale !== this.currentResult.isStale) {\n      this.currentResult = this.createResult()\n      this.updateListener?.(this.currentResult)\n    }\n  }\n\n  private updateStaleTimeout(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearStaleTimeout()\n\n    const staleTime = this.config.staleTime || 0\n    const { isStale, updatedAt } = this.currentResult\n\n    if (isStale || staleTime === Infinity) {\n      return\n    }\n\n    const timeElapsed = Date.now() - updatedAt\n    const timeUntilStale = staleTime - timeElapsed\n    const timeout = Math.max(timeUntilStale, 0)\n\n    this.staleTimeoutId = setTimeout(() => {\n      this.updateIsStale()\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearRefetchInterval()\n\n    if (\n      !this.config.enabled ||\n      !this.config.refetchInterval ||\n      this.config.refetchInterval < 0 ||\n      this.config.refetchInterval === Infinity\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.config.refetchIntervalInBackground || isDocumentVisible()) {\n        this.fetch()\n      }\n    }, this.config.refetchInterval)\n  }\n\n  updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearInterval(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  private createResult(): QueryResult<TResult, TError> {\n    const { currentQuery, currentResult, previousResult, config } = this\n    const { state } = currentQuery\n    let { data, status, updatedAt } = state\n\n    // Keep previous data if needed\n    if (\n      config.keepPreviousData &&\n      state.isLoading &&\n      previousResult?.isSuccess\n    ) {\n      data = previousResult.data\n      updatedAt = previousResult.updatedAt\n      status = previousResult.status\n    }\n\n    let isStale = false\n\n    // When the query has not been fetched yet and this is the initial render,\n    // determine the staleness based on the initialStale or existence of initial data.\n    if (!currentResult && !currentQuery.state.isFetched) {\n      if (typeof config.initialStale === 'function') {\n        isStale = config.initialStale()\n      } else if (typeof config.initialStale === 'boolean') {\n        isStale = config.initialStale\n      } else {\n        isStale = typeof currentQuery.state.data === 'undefined'\n      }\n    } else {\n      isStale = currentQuery.isStaleByTime(config.staleTime)\n    }\n\n    return {\n      ...getStatusProps(status),\n      canFetchMore: state.canFetchMore,\n      clear: this.clear,\n      data,\n      error: state.error,\n      failureCount: state.failureCount,\n      fetchMore: this.fetchMore,\n      isFetched: state.isFetched,\n      isFetching: state.isFetching,\n      isFetchingMore: state.isFetchingMore,\n      isStale,\n      query: currentQuery,\n      refetch: this.refetch,\n      updatedAt,\n    }\n  }\n\n  private updateQuery(): boolean {\n    const prevQuery = this.currentQuery\n\n    // Remove the initial data when there is an existing query\n    // because this data should not be used for a new query\n    const config =\n      this.config.keepPreviousData && prevQuery\n        ? { ...this.config, initialData: undefined }\n        : this.config\n\n    const newQuery = this.queryCache.buildQuery(config.queryKey, config)\n\n    if (newQuery === prevQuery) {\n      return false\n    }\n\n    this.previousResult = this.currentResult\n    this.currentQuery = newQuery\n    this.currentResult = this.createResult()\n\n    if (this.started) {\n      prevQuery?.unsubscribeObserver(this)\n      this.currentQuery.subscribeObserver(this)\n    }\n\n    return true\n  }\n\n  onQueryUpdate(\n    _state: QueryState<TResult, TError>,\n    action: Action<TResult, TError>\n  ): void {\n    const { config } = this\n\n    // Store current result and get new result\n    const prevResult = this.currentResult\n    this.currentResult = this.createResult()\n    const result = this.currentResult\n\n    // We need to check the action because the state could have\n    // transitioned from success to success in case of `setQueryData`.\n    if (action.type === 'Success' && result.isSuccess) {\n      config.onSuccess?.(result.data!)\n      config.onSettled?.(result.data!, null)\n      this.updateTimers()\n    } else if (action.type === 'Error' && result.isError) {\n      config.onError?.(result.error!)\n      config.onSettled?.(undefined, result.error!)\n      this.updateTimers()\n    }\n\n    // Decide if we need to notify the listener\n    const notify =\n      // Always notify on data or error change\n      result.data !== prevResult.data ||\n      result.error !== prevResult.error ||\n      // Maybe notify on other changes\n      config.notifyOnStatusChange\n\n    if (notify) {\n      this.updateListener?.(result)\n    }\n  }\n}\n","import {\n  CancelledError,\n  Console,\n  Updater,\n  functionalUpdate,\n  getStatusProps,\n  isCancelable,\n  isCancelledError,\n  isDocumentVisible,\n  isOnline,\n  isServer,\n  replaceEqualDeep,\n  sleep,\n} from './utils'\nimport {\n  ArrayQueryKey,\n  InitialDataFunction,\n  IsFetchingMoreValue,\n  QueryConfig,\n  QueryFunction,\n  QueryStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport { QueryObserver, UpdateListener } from './queryObserver'\n\n// TYPES\n\ninterface QueryInitConfig<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  notifyGlobalListeners: (query: Query<TResult, TError>) => void\n}\n\nexport interface QueryState<TResult, TError> {\n  canFetchMore?: boolean\n  data?: TResult\n  error: TError | null\n  failureCount: number\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  status: QueryStatus\n  throwInErrorBoundary?: boolean\n  updatedAt: number\n}\n\ninterface FetchOptions {\n  fetchMore?: FetchMoreOptions\n}\n\nexport interface FetchMoreOptions {\n  fetchMoreVariable?: unknown\n  previous: boolean\n}\n\nexport interface RefetchOptions {\n  throwOnError?: boolean\n}\n\nexport enum ActionType {\n  Failed = 'Failed',\n  Fetch = 'Fetch',\n  Success = 'Success',\n  Error = 'Error',\n}\n\ninterface FailedAction {\n  type: ActionType.Failed\n}\n\ninterface FetchAction {\n  type: ActionType.Fetch\n  isFetchingMore?: IsFetchingMoreValue\n}\n\ninterface SuccessAction<TResult> {\n  type: ActionType.Success\n  data: TResult | undefined\n  canFetchMore?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: ActionType.Error\n  error: TError\n}\n\nexport type Action<TResult, TError> =\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | SuccessAction<TResult>\n\n// CLASS\n\nexport class Query<TResult, TError> {\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  observers: QueryObserver<TResult, TError>[]\n  state: QueryState<TResult, TError>\n  cacheTime: number\n\n  private queryCache: QueryCache\n  private promise?: Promise<TResult | undefined>\n  private gcTimeout?: number\n  private cancelFetch?: () => void\n  private continueFetch?: () => void\n  private isTransportCancelable?: boolean\n  private notifyGlobalListeners: (query: Query<TResult, TError>) => void\n\n  constructor(init: QueryInitConfig<TResult, TError>) {\n    this.config = init.config\n    this.queryCache = init.queryCache\n    this.queryKey = init.queryKey\n    this.queryHash = init.queryHash\n    this.notifyGlobalListeners = init.notifyGlobalListeners\n    this.observers = []\n    this.state = getDefaultState(init.config)\n    this.cacheTime = init.config.cacheTime!\n    this.scheduleGc()\n  }\n\n  private updateConfig(config: QueryConfig<TResult, TError>): void {\n    this.config = config\n    this.cacheTime = Math.max(this.cacheTime, config.cacheTime || 0)\n  }\n\n  private dispatch(action: Action<TResult, TError>): void {\n    this.state = queryReducer(this.state, action)\n\n    this.observers.forEach(observer => {\n      observer.onQueryUpdate(this.state, action)\n    })\n\n    this.notifyGlobalListeners(this)\n  }\n\n  private scheduleGc(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearGcTimeout()\n\n    if (this.cacheTime === Infinity || this.observers.length > 0) {\n      return\n    }\n\n    this.gcTimeout = setTimeout(() => {\n      this.clear()\n    }, this.cacheTime)\n  }\n\n  cancel(): void {\n    this.cancelFetch?.()\n  }\n\n  private continue(): void {\n    this.continueFetch?.()\n  }\n\n  private clearTimersObservers(): void {\n    this.observers.forEach(observer => {\n      observer.clearTimers()\n    })\n  }\n\n  private clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  setData(updater: Updater<TResult | undefined, TResult>): void {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data: TResult | undefined = functionalUpdate(updater, prevData)\n\n    // Structurally share data between prev and new data if needed\n    if (this.config.structuralSharing) {\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.config.isDataEqual?.(prevData, data)) {\n      data = prevData\n    }\n\n    // Try to determine if more data can be fetched\n    const canFetchMore = hasMorePages(this.config, data)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      type: ActionType.Success,\n      data,\n      canFetchMore,\n    })\n  }\n\n  clear(): void {\n    this.queryCache.removeQuery(this)\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.clearTimersObservers()\n    this.cancel()\n  }\n\n  isEnabled(): boolean {\n    return this.observers.some(observer => observer.config.enabled)\n  }\n\n  isStale(): boolean {\n    return this.observers.some(observer => observer.isStale())\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      !this.state.isSuccess || this.state.updatedAt + staleTime <= Date.now()\n    )\n  }\n\n  async onWindowFocus(): Promise<void> {\n    if (\n      this.observers.some(\n        observer =>\n          observer.isStale() &&\n          observer.config.enabled &&\n          observer.config.refetchOnWindowFocus\n      )\n    ) {\n      try {\n        await this.fetch()\n      } catch {\n        // ignore\n      }\n    }\n\n    this.continue()\n  }\n\n  async onOnline(): Promise<void> {\n    if (\n      this.observers.some(\n        observer =>\n          observer.isStale() &&\n          observer.config.enabled &&\n          observer.config.refetchOnReconnect\n      )\n    ) {\n      try {\n        await this.fetch()\n      } catch {\n        // ignore\n      }\n    }\n\n    this.continue()\n  }\n\n  subscribe(\n    listener?: UpdateListener<TResult, TError>\n  ): QueryObserver<TResult, TError> {\n    const observer = new QueryObserver<TResult, TError>({\n      queryCache: this.queryCache,\n      queryKey: this.queryKey,\n      ...this.config,\n    })\n\n    observer.subscribe(listener)\n\n    return observer\n  }\n\n  subscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers.push(observer)\n\n    // Stop the query from being garbage collected\n    this.clearGcTimeout()\n  }\n\n  unsubscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    if (!this.observers.length) {\n      // If the transport layer does not support cancellation\n      // we'll let the query continue so the result can be cached\n      if (this.isTransportCancelable) {\n        this.cancel()\n      }\n    }\n\n    this.scheduleGc()\n  }\n\n  async refetch(\n    options?: RefetchOptions,\n    config?: QueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    try {\n      return await this.fetch(undefined, config)\n    } catch (error) {\n      if (options?.throwOnError === true) {\n        throw error\n      }\n    }\n  }\n\n  async fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions,\n    config?: QueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    return this.fetch(\n      {\n        fetchMore: {\n          fetchMoreVariable,\n          previous: options?.previous || false,\n        },\n      },\n      config\n    )\n  }\n\n  async fetch(\n    options?: FetchOptions,\n    config?: QueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    // If we are already fetching, return current promise\n    if (this.promise) {\n      return this.promise\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (config) {\n      this.updateConfig(config)\n    }\n\n    config = this.config\n\n    // Check if there is a query function\n    if (typeof config.queryFn !== 'function') {\n      return\n    }\n\n    // Get the query function params\n    const filter = config.queryFnParamsFilter\n    const params = filter ? filter(this.queryKey) : this.queryKey\n\n    this.promise = (async () => {\n      try {\n        let data: any\n\n        if (config.infinite) {\n          data = await this.startInfiniteFetch(config, params, options)\n        } else {\n          data = await this.startFetch(config, params, options)\n        }\n\n        // Set success state\n        this.setData(data)\n\n        // Cleanup\n        delete this.promise\n\n        // Return data\n        return data\n      } catch (error) {\n        // Set error state\n        this.dispatch({\n          type: ActionType.Error,\n          error,\n        })\n\n        // Log error\n        if (!isCancelledError(error)) {\n          Console.error(error)\n        }\n\n        // Cleanup\n        delete this.promise\n\n        // Propagate error\n        throw error\n      }\n    })()\n\n    return this.promise\n  }\n\n  private async startFetch(\n    config: QueryConfig<TResult, TError>,\n    params: unknown[],\n    _options?: FetchOptions\n  ): Promise<TResult> {\n    // Create function to fetch the data\n    const fetchData = () => config.queryFn!(...params)\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch })\n    }\n\n    // Try to fetch the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  private async startInfiniteFetch(\n    config: QueryConfig<TResult, TError>,\n    params: unknown[],\n    options?: FetchOptions\n  ): Promise<TResult[]> {\n    const fetchMore = options?.fetchMore\n    const { previous, fetchMoreVariable } = fetchMore || {}\n    const isFetchingMore = fetchMore ? (previous ? 'previous' : 'next') : false\n    const prevPages: TResult[] = (this.state.data as any) || []\n\n    // Create function to fetch a page\n    const fetchPage = async (\n      pages: TResult[],\n      prepend?: boolean,\n      cursor?: unknown\n    ) => {\n      const lastPage = getLastPage(pages, prepend)\n\n      if (\n        typeof cursor === 'undefined' &&\n        typeof lastPage !== 'undefined' &&\n        config.getFetchMore\n      ) {\n        cursor = config.getFetchMore(lastPage, pages)\n      }\n\n      const page = await config.queryFn!(...params, cursor)\n\n      return prepend ? [page, ...pages] : [...pages, page]\n    }\n\n    // Create function to fetch the data\n    const fetchData = () => {\n      if (isFetchingMore) {\n        return fetchPage(prevPages, previous, fetchMoreVariable)\n      } else if (!prevPages.length) {\n        return fetchPage([])\n      } else {\n        let promise = fetchPage([])\n        for (let i = 1; i < prevPages.length; i++) {\n          promise = promise.then(fetchPage)\n        }\n        return promise\n      }\n    }\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch, isFetchingMore })\n    }\n\n    // Try to get the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  private async tryFetchData<T>(\n    config: QueryConfig<TResult, TError>,\n    fn: QueryFunction<T>\n  ): Promise<T> {\n    return new Promise<T>((outerResolve, outerReject) => {\n      let resolved = false\n      let continueLoop: () => void\n      let cancelTransport: () => void\n\n      const done = () => {\n        resolved = true\n\n        delete this.cancelFetch\n        delete this.continueFetch\n        delete this.isTransportCancelable\n\n        // End loop if currently paused\n        continueLoop?.()\n      }\n\n      const resolve = (value: any) => {\n        done()\n        outerResolve(value)\n      }\n\n      const reject = (value: any) => {\n        done()\n        outerReject(value)\n      }\n\n      // Create callback to cancel this fetch\n      this.cancelFetch = () => {\n        reject(new CancelledError())\n        try {\n          cancelTransport?.()\n        } catch {}\n      }\n\n      // Create callback to continue this fetch\n      this.continueFetch = () => {\n        continueLoop?.()\n      }\n\n      // Create loop function\n      const run = async () => {\n        try {\n          // Execute query\n          const promiseOrValue = fn()\n\n          // Check if the transport layer support cancellation\n          if (isCancelable(promiseOrValue)) {\n            cancelTransport = () => {\n              promiseOrValue.cancel()\n            }\n            this.isTransportCancelable = true\n          }\n\n          // Await data\n          resolve(await promiseOrValue)\n        } catch (error) {\n          // Stop if the fetch is already resolved\n          if (resolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const { failureCount } = this.state\n          const { retry, retryDelay } = config\n\n          const shouldRetry =\n            retry === true ||\n            failureCount < retry! ||\n            (typeof retry === 'function' && retry(failureCount, error))\n\n          if (!shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          // Increase the failureCount\n          this.dispatch({ type: ActionType.Failed })\n\n          // Delay\n          await sleep(functionalUpdate(retryDelay, failureCount) || 0)\n\n          // Pause retry if the document is not visible or when the device is offline\n          if (!isDocumentVisible() || !isOnline()) {\n            await new Promise(continueResolve => {\n              continueLoop = continueResolve\n            })\n          }\n\n          // Try again if not resolved yet\n          if (!resolved) {\n            run()\n          }\n        }\n      }\n\n      // Start loop\n      run()\n    })\n  }\n}\n\nfunction getLastPage<TResult>(pages: TResult[], previous?: boolean): TResult {\n  return previous ? pages[0] : pages[pages.length - 1]\n}\n\nfunction hasMorePages<TResult, TError>(\n  config: QueryConfig<TResult, TError>,\n  pages: unknown,\n  previous?: boolean\n): boolean | undefined {\n  if (config.infinite && config.getFetchMore && Array.isArray(pages)) {\n    return Boolean(config.getFetchMore(getLastPage(pages, previous), pages))\n  }\n}\n\nfunction getDefaultState<TResult, TError>(\n  config: QueryConfig<TResult, TError>\n): QueryState<TResult, TError> {\n  const initialData =\n    typeof config.initialData === 'function'\n      ? (config.initialData as InitialDataFunction<TResult>)()\n      : config.initialData\n\n  const hasInitialData = typeof initialData !== 'undefined'\n\n  const initialStatus = hasInitialData\n    ? QueryStatus.Success\n    : config.enabled\n    ? QueryStatus.Loading\n    : QueryStatus.Idle\n\n  return {\n    ...getStatusProps(initialStatus),\n    error: null,\n    isFetched: false,\n    isFetching: initialStatus === QueryStatus.Loading,\n    isFetchingMore: false,\n    failureCount: 0,\n    data: initialData,\n    updatedAt: Date.now(),\n    canFetchMore: hasMorePages(config, initialData),\n  }\n}\n\nexport function queryReducer<TResult, TError>(\n  state: QueryState<TResult, TError>,\n  action: Action<TResult, TError>\n): QueryState<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Failed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case ActionType.Fetch:\n      const status =\n        typeof state.data !== 'undefined'\n          ? QueryStatus.Success\n          : QueryStatus.Loading\n      return {\n        ...state,\n        ...getStatusProps(status),\n        isFetching: true,\n        isFetchingMore: action.isFetchingMore || false,\n        failureCount: 0,\n      }\n    case ActionType.Success:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n        isFetched: true,\n        isFetching: false,\n        isFetchingMore: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case ActionType.Error:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Error),\n        error: action.error,\n        isFetched: true,\n        isFetching: false,\n        isFetchingMore: false,\n        failureCount: state.failureCount + 1,\n        throwInErrorBoundary: true,\n      }\n    default:\n      return state\n  }\n}\n","import {\n  Updater,\n  deepIncludes,\n  functionalUpdate,\n  getQueryArgs,\n  isDocumentVisible,\n  isObject,\n  isOnline,\n  isServer,\n} from './utils'\nimport { getDefaultedQueryConfig } from './config'\nimport { Query } from './query'\nimport {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  ReactQueryConfig,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from './types'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  frozen?: boolean\n  defaultConfig?: ReactQueryConfig\n}\n\ninterface ClearOptions {\n  notify?: boolean\n}\n\ninterface PrefetchQueryOptions {\n  force?: boolean\n  throwOnError?: boolean\n}\n\ninterface InvalidateQueriesOptions extends QueryPredicateOptions {\n  refetchActive?: boolean\n  refetchInactive?: boolean\n  throwOnError?: boolean\n}\n\ninterface QueryPredicateOptions {\n  exact?: boolean\n}\n\ntype QueryPredicate = QueryKey | QueryPredicateFn | true\n\ntype QueryPredicateFn = (query: Query<unknown, unknown>) => boolean\n\nexport interface PrefetchQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n  options?: PrefetchQueryOptions\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (\n  cache: QueryCache,\n  query?: Query<unknown, unknown>\n) => void\n\n// CLASS\n\nexport class QueryCache {\n  isFetching: number\n\n  private config: QueryCacheConfig\n  private globalListeners: QueryCacheListener[]\n  private queries: QueryHashMap\n  private queriesArray: Query<any, any>[]\n\n  constructor(config?: QueryCacheConfig) {\n    this.config = config || {}\n\n    // A frozen cache does not add new queries to the cache\n    this.globalListeners = []\n\n    this.queries = {}\n    this.queriesArray = []\n    this.isFetching = 0\n  }\n\n  private notifyGlobalListeners(query?: Query<any, any>) {\n    this.isFetching = this.getQueries().reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    this.globalListeners.forEach(listener => {\n      listener(this, query)\n    })\n  }\n\n  getDefaultConfig() {\n    return this.config.defaultConfig\n  }\n\n  getDefaultedQueryConfig<TResult, TError>(\n    config?: QueryConfig<TResult, TError>\n  ): QueryConfig<TResult, TError> {\n    return getDefaultedQueryConfig(this.getDefaultConfig(), undefined, config, {\n      queryCache: this,\n    })\n  }\n\n  subscribe(listener: QueryCacheListener): () => void {\n    this.globalListeners.push(listener)\n    return () => {\n      this.globalListeners = this.globalListeners.filter(x => x !== listener)\n    }\n  }\n\n  clear(options?: ClearOptions): void {\n    this.removeQueries()\n    if (options?.notify) {\n      this.notifyGlobalListeners()\n    }\n  }\n\n  getQueries<TResult = unknown, TError = unknown>(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): Query<TResult, TError>[] {\n    if (predicate === true || typeof predicate === 'undefined') {\n      return this.queriesArray\n    }\n\n    let predicateFn: QueryPredicateFn\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate as QueryPredicateFn\n    } else {\n      const config = this.getDefaultedQueryConfig()\n      const [queryHash, queryKey] = config.queryKeySerializerFn!(predicate)\n\n      predicateFn = d =>\n        options?.exact\n          ? d.queryHash === queryHash\n          : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return this.queriesArray.filter(predicateFn)\n  }\n\n  getQuery<TResult, TError = unknown>(\n    predicate: QueryPredicate\n  ): Query<TResult, TError> | undefined {\n    return this.getQueries<TResult, TError>(predicate, { exact: true })[0]\n  }\n\n  getQueryData<TResult>(predicate: QueryPredicate): TResult | undefined {\n    return this.getQuery<TResult>(predicate)?.state.data\n  }\n\n  removeQuery(query: Query<any, any>): void {\n    if (this.queries[query.queryHash]) {\n      query.destroy()\n      delete this.queries[query.queryHash]\n      this.queriesArray = this.queriesArray.filter(x => x !== query)\n      this.notifyGlobalListeners(query)\n    }\n  }\n\n  removeQueries(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => {\n      this.removeQuery(query)\n    })\n  }\n\n  cancelQueries(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => {\n      query.cancel()\n    })\n  }\n\n  async invalidateQueries(\n    predicate?: QueryPredicate,\n    options?: InvalidateQueriesOptions\n  ): Promise<void> {\n    const { refetchActive = true, refetchInactive = false, throwOnError } =\n      options || {}\n\n    try {\n      await Promise.all(\n        this.getQueries(predicate, options).map(query => {\n          const enabled = query.isEnabled()\n\n          if ((enabled && refetchActive) || (!enabled && refetchInactive)) {\n            return query.fetch()\n          }\n\n          return undefined\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  resetErrorBoundaries(): void {\n    this.getQueries().forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  buildQuery<TResult, TError = unknown>(\n    userQueryKey: QueryKey,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): Query<TResult, TError> {\n    const config = this.getDefaultedQueryConfig(queryConfig)\n    const [queryHash, queryKey] = config.queryKeySerializerFn!(userQueryKey)\n\n    if (this.queries[queryHash]) {\n      return this.queries[queryHash] as Query<TResult, TError>\n    }\n\n    const query = new Query<TResult, TError>({\n      queryCache: this,\n      queryKey,\n      queryHash,\n      config,\n      notifyGlobalListeners: query => {\n        this.notifyGlobalListeners(query)\n      },\n    })\n\n    if (!this.config.frozen) {\n      this.queries[queryHash] = query\n      this.queriesArray.push(query)\n      this.notifyGlobalListeners(query)\n    }\n\n    return query\n  }\n\n  // Parameter syntax with optional prefetch options\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function, config and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Object syntax\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    config: PrefetchQueryObjectConfig<TResult, TError>\n  ): Promise<TResult | undefined>\n\n  // Implementation\n  async prefetchQuery<TResult, TError>(\n    ...args: any[]\n  ): Promise<TResult | undefined> {\n    if (\n      isObject(args[1]) &&\n      (args[1].hasOwnProperty('throwOnError') ||\n        args[1].hasOwnProperty('force'))\n    ) {\n      args[3] = args[1]\n      args[1] = undefined\n      args[2] = undefined\n    }\n\n    const [queryKey, config, options] = getQueryArgs<\n      TResult,\n      TError,\n      PrefetchQueryOptions | undefined\n    >(args)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    const configWithoutRetry = this.getDefaultedQueryConfig({\n      retry: false,\n      ...config,\n    })\n\n    let query\n    try {\n      query = this.buildQuery<TResult, TError>(queryKey, configWithoutRetry)\n      if (options?.force || query.isStaleByTime(config.staleTime)) {\n        await query.fetch(undefined, configWithoutRetry)\n      }\n      return query.state.data\n    } catch (error) {\n      if (options?.throwOnError) {\n        throw error\n      }\n    }\n  }\n\n  setQueryData<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    updater: Updater<TResult | undefined, TResult>,\n    config?: QueryConfig<TResult, TError>\n  ) {\n    const query = this.getQuery<TResult, TError>(queryKey)\n\n    if (query) {\n      query.setData(updater)\n      return\n    }\n\n    this.buildQuery<TResult, TError>(queryKey, {\n      initialStale: typeof config?.staleTime === 'undefined',\n      initialData: functionalUpdate(updater, undefined),\n      ...config,\n    })\n  }\n}\n\nconst defaultQueryCache = makeQueryCache({ frozen: isServer })\nexport { defaultQueryCache as queryCache }\nexport const queryCaches = [defaultQueryCache]\n\nexport function makeQueryCache(config?: QueryCacheConfig) {\n  return new QueryCache(config)\n}\n\nexport function onVisibilityOrOnlineChange(isOnlineChange: boolean) {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache => {\n      queryCache.getQueries().forEach(query => {\n        if (isOnlineChange) {\n          query.onOnline()\n        } else {\n          query.onWindowFocus()\n        }\n      })\n    })\n  }\n}\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setFocusHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange(false)\n)\n\nsetFocusHandler(handleFocus => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to visibillitychange and focus\n  window.addEventListener('visibilitychange', handleFocus, false)\n  window.addEventListener('focus', handleFocus, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('visibilitychange', handleFocus)\n    window.removeEventListener('focus', handleFocus)\n  }\n})\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setOnlineHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange(true)\n)\n\nsetOnlineHandler(handleOnline => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to online\n  window.addEventListener('online', handleOnline, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('online', handleOnline)\n  }\n})\n","import React from 'react'\n\nimport {\n  queryCache as defaultQueryCache,\n  queryCaches,\n  makeQueryCache,\n} from '../core'\nimport { QueryCache } from '../core/queryCache'\n\nexport const queryCacheContext = React.createContext(defaultQueryCache)\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport interface ReactQueryCacheProviderProps {\n  queryCache?: QueryCache\n}\n\nexport const ReactQueryCacheProvider: React.FC<ReactQueryCacheProviderProps> = ({\n  queryCache,\n  children,\n}) => {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { mergeReactQueryConfigs } from '../core/config'\nimport { ReactQueryConfig } from '../core/types'\n\nconst configContext = React.createContext<ReactQueryConfig | undefined>(\n  undefined\n)\n\nexport function useContextConfig() {\n  return React.useContext(configContext)\n}\n\nexport interface ReactQueryConfigProviderProps {\n  config: ReactQueryConfig\n}\n\nexport const ReactQueryConfigProvider: React.FC<ReactQueryConfigProviderProps> = ({\n  config,\n  children,\n}) => {\n  const parentConfig = useContextConfig()\n\n  const mergedConfig = React.useMemo(\n    () =>\n      parentConfig ? mergeReactQueryConfigs(parentConfig, config) : config,\n    [config, parentConfig]\n  )\n\n  return (\n    <configContext.Provider value={mergedConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { isServer } from '../core/utils'\n\nexport function useGetLatest<T>(obj: T): () => T {\n  const ref = React.useRef<T>(obj)\n  ref.current = obj\n  return React.useCallback(() => ref.current, [])\n}\n\nfunction useIsMounted(): () => boolean {\n  const mountedRef = React.useRef(false)\n  const isMounted = React.useCallback(() => mountedRef.current, [])\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return isMounted\n}\n\nexport function useMountedCallback<T extends Function>(callback: T): T {\n  const isMounted = useIsMounted()\n  return (React.useCallback(\n    (...args: any[]) => {\n      if (isMounted()) {\n        return callback(...args)\n      }\n    },\n    [callback, isMounted]\n  ) as any) as T\n}\n\n/**\n * This hook is a safe useState version which schedules state updates in microtasks\n * to prevent updating a component state while React is rendering different components\n * or when the component is not mounted anymore.\n */\nexport function useSafeState<S>(\n  initialState: S | (() => S)\n): [S, React.Dispatch<React.SetStateAction<S>>] {\n  const isMounted = useIsMounted()\n  const [state, setState] = React.useState(initialState)\n\n  const safeSetState = React.useCallback(\n    (value: React.SetStateAction<S>) => {\n      scheduleMicrotask(() => {\n        if (isMounted()) {\n          setState(value)\n        }\n      })\n    },\n    [isMounted]\n  )\n\n  return [state, safeSetState]\n}\n\nexport function useRerenderer() {\n  const [, setState] = useSafeState({})\n  return React.useCallback(() => setState({}), [setState])\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nfunction scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import React from 'react'\n\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useSafeState } from './utils'\n\nexport function useIsFetching(): number {\n  const queryCache = useQueryCache()\n\n  const [isFetching, setIsFetching] = useSafeState(queryCache.isFetching)\n\n  React.useEffect(\n    () =>\n      queryCache.subscribe(() => {\n        setIsFetching(queryCache.isFetching)\n      }),\n    [queryCache, setIsFetching]\n  )\n\n  return isFetching\n}\n","import { MutationConfig } from '../core/types'\nimport { getDefaultedMutationConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedMutationConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import React from 'react'\n\nimport { useDefaultedMutationConfig } from './useDefaultedMutationConfig'\nimport { useGetLatest, useMountedCallback } from './utils'\nimport { Console, uid, getStatusProps } from '../core/utils'\nimport {\n  QueryStatus,\n  MutationResultPair,\n  MutationFunction,\n  MutationConfig,\n  MutateConfig,\n} from '../core/types'\n\n// TYPES\n\ntype Reducer<S, A> = (prevState: S, action: A) => S\n\ninterface State<TResult, TError> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nenum ActionType {\n  Reset = 'Reset',\n  Loading = 'Loading',\n  Resolve = 'Resolve',\n  Reject = 'Reject',\n}\n\ninterface ResetAction {\n  type: ActionType.Reset\n}\n\ninterface LoadingAction {\n  type: ActionType.Loading\n}\n\ninterface ResolveAction<TResult> {\n  type: ActionType.Resolve\n  data: TResult\n}\n\ninterface RejectAction<TError> {\n  type: ActionType.Reject\n  error: TError\n}\n\ntype Action<TResult, TError> =\n  | ResetAction\n  | LoadingAction\n  | ResolveAction<TResult>\n  | RejectAction<TError>\n\n// HOOK\n\nconst getDefaultState = (): State<any, any> => ({\n  ...getStatusProps(QueryStatus.Idle),\n  data: undefined,\n  error: null,\n})\n\nfunction mutationReducer<TResult, TError>(\n  state: State<TResult, TError>,\n  action: Action<TResult, TError>\n): State<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState()\n    case ActionType.Loading:\n      return {\n        ...getStatusProps(QueryStatus.Loading),\n        data: undefined,\n        error: null,\n      }\n    case ActionType.Resolve:\n      return {\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n      }\n    case ActionType.Reject:\n      return {\n        ...getStatusProps(QueryStatus.Error),\n        data: undefined,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nexport function useMutation<\n  TResult,\n  TError = unknown,\n  TVariables = undefined,\n  TSnapshot = unknown\n>(\n  mutationFn: MutationFunction<TResult, TVariables>,\n  config: MutationConfig<TResult, TError, TVariables, TSnapshot> = {}\n): MutationResultPair<TResult, TError, TVariables, TSnapshot> {\n  config = useDefaultedMutationConfig(config)\n  const getConfig = useGetLatest(config)\n\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer as Reducer<State<TResult, TError>, Action<TResult, TError>>,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const latestMutationRef = React.useRef<number>()\n\n  const mutate = React.useCallback(\n    async (\n      variables?: TVariables,\n      mutateConfig: MutateConfig<TResult, TError, TVariables, TSnapshot> = {}\n    ): Promise<TResult | undefined> => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue: TSnapshot | undefined\n\n      try {\n        dispatch({ type: ActionType.Loading })\n        snapshotValue = (await config.onMutate?.(variables!)) as TSnapshot\n\n        const data = await getMutationFn()(variables!)\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Resolve, data })\n        }\n\n        await config.onSuccess?.(data, variables!)\n        await mutateConfig.onSuccess?.(data, variables!)\n        await config.onSettled?.(data, null, variables!)\n        await mutateConfig.onSettled?.(data, null, variables!)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await config.onError?.(error, variables!, snapshotValue!)\n        await mutateConfig.onError?.(error, variables!, snapshotValue!)\n        await config.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue as TSnapshot\n        )\n        await mutateConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue\n        )\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Reject, error })\n        }\n\n        if (mutateConfig.throwOnError ?? config.throwOnError) {\n          throw error\n        }\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => {\n    dispatch({ type: ActionType.Reset })\n  }, [dispatch])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import { QueryConfig } from '../core/types'\nimport { getDefaultedQueryConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedQueryConfig<TResult, TError>(\n  config?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedQueryConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import React from 'react'\n\nimport { useRerenderer } from './utils'\nimport { QueryObserver } from '../core/queryObserver'\nimport { QueryResultBase, QueryObserverConfig } from '../core/types'\nimport { useDefaultedQueryConfig } from './useDefaultedQueryConfig'\n\nexport function useBaseQuery<TResult, TError>(\n  config: QueryObserverConfig<TResult, TError> = {}\n): QueryResultBase<TResult, TError> {\n  config = useDefaultedQueryConfig(config)\n\n  // Make a rerender function\n  const rerender = useRerenderer()\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<TResult, TError>>()\n  const firstRender = !observerRef.current\n  const observer = observerRef.current || new QueryObserver(config)\n  observerRef.current = observer\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(() => {\n        rerender()\n      }),\n    [observer, rerender]\n  )\n\n  // Update config\n  if (!firstRender) {\n    observer.updateConfig(config)\n  }\n\n  const result = observer.getCurrentResult()\n\n  // Handle suspense\n  if (config.suspense || config.useErrorBoundary) {\n    if (result.isError && result.query.state.throwInErrorBoundary) {\n      throw result.error\n    }\n\n    if (config.enabled && config.suspense && !result.isSuccess) {\n      const unsubscribe = observer.subscribe()\n      throw observer.fetch().finally(unsubscribe)\n    }\n  }\n\n  return result\n}\n","import {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  QueryResult,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Object syntax\nexport function useQuery<TResult = unknown, TError = unknown>(\n  config: UseQueryObjectConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Implementation\nexport function useQuery<TResult, TError>(\n  ...args: any[]\n): QueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  return useBaseQuery<TResult, TError>(config)\n}\n","import {\n  PaginatedQueryConfig,\n  PaginatedQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n\n// TYPES\n\nexport interface UsePaginatedQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: PaginatedQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Object syntax\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Implementation\nexport function usePaginatedQuery<TResult, TError>(\n  ...args: any[]\n): PaginatedQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  const result = useBaseQuery<TResult, TError>({\n    ...config,\n    keepPreviousData: true,\n  })\n  return {\n    ...result,\n    resolvedData: result.data,\n    latestData:\n      result.query.state.data === result.data ? result.data : undefined,\n  }\n}\n","import {\n  InfiniteQueryConfig,\n  InfiniteQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseInfiniteQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: InfiniteQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Object syntax\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Implementation\nexport function useInfiniteQuery<TResult, TError>(\n  ...args: any[]\n): InfiniteQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult[], TError>(args)[1]\n  return useBaseQuery<TResult[], TError>({ ...config, infinite: true })\n}\n"],"names":["QueryStatus","CancelledError","_uid","uid","isServer","window","noop","Console","console","error","warn","log","setConsole","c","functionalUpdate","updater","input","stableStringifyReplacer","_key","value","Error","isObject","Object","keys","sort","reduce","result","key","stableStringify","JSON","stringify","deepIncludes","a","b","some","isDocumentVisible","document","undefined","includes","visibilityState","isOnline","navigator","onLine","getQueryArgs","args","queryKey","queryFn","config","options","replaceEqualDeep","array","Array","isArray","isPlainObject","aSize","length","bItems","bSize","copy","equalItems","i","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","toString","call","isCancelable","cancel","isError","isCancelledError","sleep","timeout","Promise","resolve","setTimeout","getStatusProps","status","isLoading","Loading","isSuccess","Success","isIdle","Idle","createSetHandler","fn","removePreviousHandler","callback","defaultQueryKeySerializerFn","arrayQueryKey","queryHash","parse","DEFAULT_STALE_TIME","DEFAULT_CACHE_TIME","DEFAULT_CONFIG","queries","queryKeySerializerFn","enabled","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","notifyOnStatusChange","structuralSharing","mergeReactQueryConfigs","shared","mutations","getDefaultedQueryConfig","queryCacheConfig","contextConfig","configOverrides","getDefaultedMutationConfig","then","direct","body","recover","e","QueryObserver","queryCache","clear","bind","refetch","fetchMore","updateQuery","subscribe","listener","started","updateListener","currentQuery","subscribeObserver","optionalFetch","updateTimers","unsubscribe","clearTimers","unsubscribeObserver","updateConfig","prevConfig","updated","updateStaleTimeout","refetchInterval","refetchIntervalInBackground","updateRefetchInterval","isStale","currentResult","getCurrentResult","fetchMoreVariable","fetch","suspense","isFetched","observers","updateIsStale","isStaleByTime","createResult","clearStaleTimeout","updatedAt","Infinity","timeElapsed","Date","now","timeUntilStale","max","staleTimeoutId","clearRefetchInterval","refetchIntervalId","setInterval","clearInterval","previousResult","state","data","keepPreviousData","initialStale","canFetchMore","failureCount","isFetching","isFetchingMore","query","prevQuery","initialData","newQuery","buildQuery","onQueryUpdate","_state","action","prevResult","type","onSuccess","onSettled","onError","notify","f","arguments","apply","reject","ActionType","Query","init","notifyGlobalListeners","getDefaultState","scheduleGc","dispatch","queryReducer","forEach","observer","clearGcTimeout","gcTimeout","cancelFetch","continue","continueFetch","clearTimersObservers","clearTimeout","setData","prevData","isDataEqual","hasMorePages","removeQuery","destroy","isEnabled","onWindowFocus","onOnline","push","filter","x","isTransportCancelable","throwOnError","previous","promise","queryFnParamsFilter","params","infinite","startInfiniteFetch","startFetch","_options","fetchData","Fetch","tryFetchData","prevPages","fetchPage","pages","prepend","cursor","lastPage","getLastPage","getFetchMore","page","outerResolve","outerReject","resolved","continueLoop","cancelTransport","done","run","promiseOrValue","shouldRetry","Failed","continueResolve","Boolean","hasInitialData","initialStatus","throwInErrorBoundary","QueryCache","globalListeners","queriesArray","getQueries","acc","getDefaultConfig","defaultConfig","removeQueries","predicate","predicateFn","d","exact","getQuery","getQueryData","cancelQueries","invalidateQueries","refetchActive","refetchInactive","all","map","err","resetErrorBoundaries","userQueryKey","queryConfig","frozen","prefetchQuery","configWithoutRetry","force","setQueryData","defaultQueryCache","makeQueryCache","queryCaches","onVisibilityOrOnlineChange","isOnlineChange","setFocusHandler","handleFocus","addEventListener","removeEventListener","setOnlineHandler","handleOnline","queryCacheContext","React","createContext","useQueryCache","useContext","ReactQueryCacheProvider","children","resolvedQueryCache","useMemo","useEffect","indexOf","splice","configContext","useContextConfig","ReactQueryConfigProvider","parentConfig","mergedConfig","useGetLatest","obj","ref","useRef","current","useCallback","useIsMounted","mountedRef","isMounted","useMountedCallback","useSafeState","initialState","useState","setState","safeSetState","scheduleMicrotask","useRerenderer","catch","useIsFetching","setIsFetching","useDefaultedMutationConfig","contextQueryCache","_await","mutationReducer","Reset","Resolve","Reject","useMutation","mutationFn","getConfig","useReducer","unsafeDispatch","getMutationFn","latestMutationRef","mutate","variables","mutateConfig","mutationId","isLatest","snapshotValue","onMutate","reset","useErrorBoundary","useDefaultedQueryConfig","useBaseQuery","rerender","observerRef","firstRender","finally","useQuery","usePaginatedQuery","resolvedData","latestData","useInfiniteQuery"],"mappings":"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"}