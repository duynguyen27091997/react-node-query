{"version":3,"file":"react-query.production.min.js","sources":["../src/core/types.ts","../src/core/utils.ts","../src/core/config.ts","../src/core/queryObserver.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/setFocusHandler.ts","../src/core/setOnlineHandler.ts","../src/react/ReactQueryCacheProvider.tsx","../src/react/ReactQueryConfigProvider.tsx","../src/react/useMutation.ts","../src/react/utils.ts","../src/react/useDefaultedMutationConfig.tsx","../src/react/useBaseQuery.ts","../src/react/useDefaultedQueryConfig.tsx","../src/react/useInfiniteQuery.ts","../src/react/useIsFetching.ts","../src/react/usePaginatedQuery.ts","../src/react/useQuery.ts"],"sourcesContent":["import type { Query, FetchMoreOptions, RefetchOptions } from './query'\nimport type { QueryCache } from './queryCache'\n\nexport type QueryKey =\n  | boolean\n  | null\n  | number\n  | object\n  | string\n  | undefined\n  | { [key: number]: QueryKey }\n  | { [key: string]: QueryKey }\n  | readonly QueryKey[]\n\nexport type ArrayQueryKey = QueryKey[]\n\nexport type QueryFunction<TResult> = (\n  ...args: any[]\n) => TResult | Promise<TResult>\n\nexport type TypedQueryFunction<\n  TResult,\n  TArgs extends TypedQueryFunctionArgs = TypedQueryFunctionArgs\n> = (...args: TArgs) => TResult | Promise<TResult>\n\nexport type TypedQueryFunctionArgs = readonly [unknown, ...unknown[]]\n\nexport type InitialDataFunction<TResult> = () => TResult | undefined\n\nexport type InitialStaleFunction = () => boolean\n\nexport type QueryKeySerializerFunction = (\n  queryKey: QueryKey\n) => [string, QueryKey[]]\n\nexport interface BaseQueryConfig<TResult, TError = unknown, TData = TResult> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: boolean | number | ((failureCount: number, error: TError) => boolean)\n  retryDelay?: number | ((retryAttempt: number) => number)\n  staleTime?: number\n  cacheTime?: number\n  isDataEqual?: (oldData: unknown, newData: unknown) => boolean\n  queryFn?: QueryFunction<TData>\n  queryKey?: QueryKey\n  queryKeySerializerFn?: QueryKeySerializerFunction\n  queryFnParamsFilter?: (args: ArrayQueryKey) => ArrayQueryKey\n  initialData?: TResult | InitialDataFunction<TResult>\n  initialStale?: boolean | InitialStaleFunction\n  infinite?: true\n  /**\n   * Set this to `false` to disable structural sharing between query results.\n   * Defaults to `true`.\n   */\n  structuralSharing?: boolean\n  /**\n   * This function can be set to automatically get the next cursor for infinite queries.\n   * The result will also be used to determine the value of `canFetchMore`.\n   */\n  getFetchMore?: (lastPage: TData, allPages: TData[]) => unknown\n}\n\nexport interface QueryObserverConfig<\n  TResult,\n  TError = unknown,\n  TData = TResult\n> extends BaseQueryConfig<TResult, TError, TData> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   * Defaults to `true`.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If set to a number, the query will continuously refetch at this frequency in milliseconds.\n   * Defaults to `false`.\n   */\n  refetchInterval?: number | false\n  /**\n   * If set to `true`, the query will continue to refetch while their tab/window is in the background.\n   * Defaults to `false`.\n   */\n  refetchIntervalInBackground?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on window focus for this query.\n   * Defaults to `true`.\n   */\n  refetchOnWindowFocus?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on reconnect for this query.\n   * Defaults to `true`.\n   */\n  refetchOnReconnect?: boolean\n  /**\n   * If set to `false`, will disable additional instances of a query to trigger background refetches.\n   * Defaults to `true`.\n   */\n  refetchOnMount?: boolean\n  /**\n   * Whether a change to the query status should re-render a component.\n   * If set to `false`, the component will only re-render when the actual `data` or `error` changes.\n   * Defaults to `true`.\n   */\n  notifyOnStatusChange?: boolean\n  /**\n   * This callback will fire any time the query successfully fetches new data.\n   */\n  onSuccess?: (data: TResult) => void\n  /**\n   * This callback will fire if the query encounters an error and will be passed the error.\n   */\n  onError?: (err: TError) => void\n  /**\n   * This callback will fire any time the query is either successfully fetched or errors and be passed either the data or error.\n   */\n  onSettled?: (data: TResult | undefined, error: TError | null) => void\n  /**\n   * Whether errors should be thrown instead of setting the `error` property.\n   * Defaults to `false`.\n   */\n  useErrorBoundary?: boolean\n  /**\n   * If set to `true`, the query will suspend when `status === 'loading'`\n   * and throw errors when `status === 'error'`.\n   * Defaults to `false`.\n   */\n  suspense?: boolean\n  /**\n   * Set this to `true` to keep the previous `data` when fetching based on a new query key.\n   * Defaults to `false`.\n   */\n  keepPreviousData?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport interface QueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface PaginatedQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface InfiniteQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult[], TError, TResult> {}\n\nexport type IsFetchingMoreValue = 'previous' | 'next' | false\n\nexport enum QueryStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport interface QueryResultBase<TResult, TError = unknown> {\n  canFetchMore: boolean | undefined\n  clear: () => void\n  data: TResult | undefined\n  error: TError | null\n  failureCount: number\n  fetchMore: (\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ) => Promise<TResult | undefined>\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore?: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  query: Query<TResult, TError>\n  refetch: (options?: RefetchOptions) => Promise<TResult | undefined>\n  status: QueryStatus\n  updatedAt: number\n}\n\nexport interface QueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {}\n\nexport interface PaginatedQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  resolvedData: TResult | undefined\n  latestData: TResult | undefined\n}\n\nexport interface InfiniteQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult[], TError> {}\n\nexport interface MutateConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> {\n  onSuccess?: (data: TResult, variables: TVariables) => Promise<void> | void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    snapshotValue: TSnapshot\n  ) => Promise<void> | void\n  onSettled?: (\n    data: undefined | TResult,\n    error: TError | null,\n    variables: TVariables,\n    snapshotValue?: TSnapshot\n  ) => Promise<void> | void\n  throwOnError?: boolean\n}\n\nexport interface MutationConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutateConfig<TResult, TError, TVariables, TSnapshot> {\n  onMutate?: (variables: TVariables) => Promise<TSnapshot> | TSnapshot\n  useErrorBoundary?: boolean\n  suspense?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport type MutationFunction<TResult, TVariables = unknown> = (\n  variables: TVariables\n) => Promise<TResult>\n\nexport type MutateFunction<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> = (\n  variables?: TVariables,\n  config?: MutateConfig<TResult, TError, TVariables, TSnapshot>\n) => Promise<TResult | undefined>\n\nexport type MutationResultPair<TResult, TError, TVariables, TSnapshot> = [\n  MutateFunction<TResult, TError, TVariables, TSnapshot>,\n  MutationResult<TResult, TError>\n]\n\nexport interface MutationResult<TResult, TError = unknown> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  reset: () => void\n}\n\nexport interface ReactQueryConfig<TResult = unknown, TError = unknown> {\n  queries?: ReactQueryQueriesConfig<TResult, TError>\n  shared?: ReactQuerySharedConfig\n  mutations?: ReactQueryMutationsConfig<TResult, TError>\n}\n\nexport interface ReactQuerySharedConfig {\n  suspense?: boolean\n}\n\nexport interface ReactQueryQueriesConfig<TResult, TError>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface ReactQueryMutationsConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutationConfig<TResult, TError, TVariables, TSnapshot> {}\n","import { QueryConfig, QueryStatus, QueryKey, QueryFunction } from './types'\n\n// TYPES\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\ntype ConsoleFunction = (...args: any[]) => void\n\nexport interface ConsoleObject {\n  log: ConsoleFunction\n  warn: ConsoleFunction\n  error: ConsoleFunction\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport class CancelledError {}\n\n// UTILS\n\nlet _uid = 0\nexport const uid = () => _uid++\n\nexport const isServer = typeof window === 'undefined'\n\nfunction noop(): void {\n  return void 0\n}\n\nexport let Console: ConsoleObject = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function setConsole(c: ConsoleObject) {\n  Console = c\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nfunction stableStringifyReplacer(_key: string, value: any): unknown {\n  if (typeof value === 'function') {\n    throw new Error('Cannot stringify non JSON value')\n  }\n\n  if (isObject(value)) {\n    return Object.keys(value)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = value[key]\n        return result\n      }, {} as any)\n  }\n\n  return value\n}\n\nexport function stableStringify(value: any): string {\n  return JSON.stringify(value, stableStringifyReplacer)\n}\n\nexport function deepIncludes(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible(): boolean {\n  // document global can be unavailable in react native\n  if (typeof document === 'undefined') {\n    return true\n  }\n  return [undefined, 'visible', 'prerender'].includes(document.visibilityState)\n}\n\nexport function isOnline(): boolean {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  let queryKey: QueryKey\n  let queryFn: QueryFunction<TResult> | undefined\n  let config: QueryConfig<TResult, TError> | undefined\n  let options: TOptions\n\n  if (isObject(args[0])) {\n    queryKey = args[0].queryKey\n    queryFn = args[0].queryFn\n    config = args[0].config\n    options = args[1]\n  } else if (isObject(args[1])) {\n    queryKey = args[0]\n    config = args[1]\n    options = args[2]\n  } else {\n    queryKey = args[0]\n    queryFn = args[1]\n    config = args[2]\n    options = args[3]\n  }\n\n  config = config ? { queryKey, ...config } : { queryKey }\n\n  if (queryFn) {\n    config = { ...config, queryFn }\n  }\n\n  return [queryKey, config, options]\n}\n\nexport function deepEqual(a: any, b: any): boolean {\n  return replaceEqualDeep(a, b) === a\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\nexport function isObject(a: unknown): boolean {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === QueryStatus.Loading,\n    isSuccess: status === QueryStatus.Success,\n    isError: status === QueryStatus.Error,\n    isIdle: status === QueryStatus.Idle,\n  }\n}\n\nexport function createSetHandler(fn: () => void) {\n  let removePreviousHandler: (() => void) | void\n  return (callback: (handler: () => void) => void) => {\n    // Unsub the old handler\n    if (removePreviousHandler) {\n      removePreviousHandler()\n    }\n    // Sub the new handler\n    removePreviousHandler = callback(fn)\n  }\n}\n","import { stableStringify } from './utils'\nimport {\n  ArrayQueryKey,\n  QueryKey,\n  QueryKeySerializerFunction,\n  ReactQueryConfig,\n  QueryConfig,\n  MutationConfig,\n} from './types'\n\n// TYPES\n\nexport interface ReactQueryConfigRef {\n  current: ReactQueryConfig\n}\n\n// CONFIG\n\nexport const defaultQueryKeySerializerFn: QueryKeySerializerFunction = (\n  queryKey: QueryKey\n): [string, ArrayQueryKey] => {\n  try {\n    let arrayQueryKey: ArrayQueryKey = Array.isArray(queryKey)\n      ? queryKey\n      : [queryKey]\n    const queryHash = stableStringify(arrayQueryKey)\n    arrayQueryKey = JSON.parse(queryHash)\n    return [queryHash, arrayQueryKey]\n  } catch {\n    throw new Error('A valid query key is required!')\n  }\n}\n\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\nexport const DEFAULT_STALE_TIME = 0\nexport const DEFAULT_CACHE_TIME = 5 * 60 * 1000\nexport const DEFAULT_CONFIG: ReactQueryConfig = {\n  queries: {\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    enabled: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: DEFAULT_STALE_TIME,\n    cacheTime: DEFAULT_CACHE_TIME,\n    refetchOnWindowFocus: true,\n    refetchOnReconnect: true,\n    refetchOnMount: true,\n    notifyOnStatusChange: true,\n    structuralSharing: true,\n  },\n}\n\nexport function mergeReactQueryConfigs(\n  a: ReactQueryConfig,\n  b: ReactQueryConfig\n): ReactQueryConfig {\n  return {\n    shared: {\n      ...a.shared,\n      ...b.shared,\n    },\n    queries: {\n      ...a.queries,\n      ...b.queries,\n    },\n    mutations: {\n      ...a.mutations,\n      ...b.mutations,\n    },\n  }\n}\n\nexport function getDefaultedQueryConfig<TResult, TError>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: QueryConfig<TResult, TError>,\n  configOverrides?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.queries,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.queries,\n    ...contextConfig?.shared,\n    ...contextConfig?.queries,\n    ...config,\n    ...configOverrides,\n  } as QueryConfig<TResult, TError>\n}\n\nexport function getDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>,\n  configOverrides?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.mutations,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.mutations,\n    ...contextConfig?.shared,\n    ...contextConfig?.mutations,\n    ...config,\n    ...configOverrides,\n  } as MutationConfig<TResult, TError, TVariables, TSnapshot>\n}\n","import { getStatusProps, isServer, isDocumentVisible } from './utils'\nimport type { QueryResult, QueryObserverConfig } from './types'\nimport type {\n  Query,\n  QueryState,\n  Action,\n  FetchMoreOptions,\n  RefetchOptions,\n} from './query'\nimport type { QueryCache } from './queryCache'\n\nexport type UpdateListener<TResult, TError> = (\n  result: QueryResult<TResult, TError>\n) => void\n\nexport class QueryObserver<TResult, TError> {\n  config: QueryObserverConfig<TResult, TError>\n\n  private queryCache: QueryCache\n  private currentQuery!: Query<TResult, TError>\n  private currentResult!: QueryResult<TResult, TError>\n  private previousResult?: QueryResult<TResult, TError>\n  private updateListener?: UpdateListener<TResult, TError>\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private started?: boolean\n\n  constructor(config: QueryObserverConfig<TResult, TError>) {\n    this.config = config\n    this.queryCache = config.queryCache!\n\n    // Bind exposed methods\n    this.clear = this.clear.bind(this)\n    this.refetch = this.refetch.bind(this)\n    this.fetchMore = this.fetchMore.bind(this)\n\n    // Subscribe to the query\n    this.updateQuery()\n  }\n\n  subscribe(listener?: UpdateListener<TResult, TError>): () => void {\n    this.started = true\n    this.updateListener = listener\n    this.currentQuery.subscribeObserver(this)\n    this.optionalFetch()\n    this.updateTimers()\n    return this.unsubscribe.bind(this)\n  }\n\n  unsubscribe(): void {\n    this.started = false\n    this.updateListener = undefined\n    this.clearTimers()\n    this.currentQuery.unsubscribeObserver(this)\n  }\n\n  updateConfig(config: QueryObserverConfig<TResult, TError>): void {\n    const prevConfig = this.config\n    this.config = config\n\n    const updated = this.updateQuery()\n\n    // Take no further actions if the observer did not start yet\n    if (!this.started) {\n      return\n    }\n\n    // If we subscribed to a new query, optionally fetch and update refetch\n    if (updated) {\n      this.optionalFetch()\n      this.updateTimers()\n      return\n    }\n\n    // Optionally fetch if the query became enabled\n    if (config.enabled && !prevConfig.enabled) {\n      this.optionalFetch()\n    }\n\n    // Update stale interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.staleTime !== prevConfig.staleTime\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.refetchInterval !== prevConfig.refetchInterval ||\n      config.refetchIntervalInBackground !==\n        prevConfig.refetchIntervalInBackground\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  isStale(): boolean {\n    return this.currentResult.isStale\n  }\n\n  getCurrentResult(): QueryResult<TResult, TError> {\n    return this.currentResult\n  }\n\n  clear(): void {\n    return this.currentQuery.clear()\n  }\n\n  async refetch(options?: RefetchOptions): Promise<TResult | undefined> {\n    return this.currentQuery.refetch(options, this.config)\n  }\n\n  async fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    return this.currentQuery.fetchMore(fetchMoreVariable, options, this.config)\n  }\n\n  async fetch(): Promise<TResult | undefined> {\n    try {\n      return await this.currentQuery.fetch(undefined, this.config)\n    } catch {\n      // ignore\n    }\n  }\n\n  private optionalFetch(): void {\n    if (\n      this.config.enabled && // Don't auto refetch if disabled\n      !(this.config.suspense && this.currentResult.isFetched) && // Don't refetch if in suspense mode and the data is already fetched\n      this.currentResult.isStale && // Only refetch if stale\n      (this.config.refetchOnMount || this.currentQuery.observers.length === 1)\n    ) {\n      this.fetch()\n    }\n  }\n\n  private updateIsStale(): void {\n    const isStale = this.currentQuery.isStaleByTime(this.config.staleTime)\n    if (isStale !== this.currentResult.isStale) {\n      this.currentResult = this.createResult()\n      this.updateListener?.(this.currentResult)\n    }\n  }\n\n  private updateStaleTimeout(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearStaleTimeout()\n\n    const staleTime = this.config.staleTime || 0\n    const { isStale, updatedAt } = this.currentResult\n\n    if (isStale || staleTime === Infinity) {\n      return\n    }\n\n    const timeElapsed = Date.now() - updatedAt\n    const timeUntilStale = staleTime - timeElapsed\n    const timeout = Math.max(timeUntilStale, 0)\n\n    this.staleTimeoutId = setTimeout(() => {\n      this.updateIsStale()\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearRefetchInterval()\n\n    if (\n      !this.config.enabled ||\n      !this.config.refetchInterval ||\n      this.config.refetchInterval < 0 ||\n      this.config.refetchInterval === Infinity\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.config.refetchIntervalInBackground || isDocumentVisible()) {\n        this.fetch()\n      }\n    }, this.config.refetchInterval)\n  }\n\n  updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearInterval(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  private createResult(): QueryResult<TResult, TError> {\n    const { currentQuery, currentResult, previousResult, config } = this\n    const { state } = currentQuery\n    let { data, status, updatedAt } = state\n\n    // Keep previous data if needed\n    if (\n      config.keepPreviousData &&\n      state.isLoading &&\n      previousResult?.isSuccess\n    ) {\n      data = previousResult.data\n      updatedAt = previousResult.updatedAt\n      status = previousResult.status\n    }\n\n    let isStale = false\n\n    // When the query has not been fetched yet and this is the initial render,\n    // determine the staleness based on the initialStale or existence of initial data.\n    if (!currentResult && !currentQuery.state.isFetched) {\n      if (typeof config.initialStale === 'function') {\n        isStale = config.initialStale()\n      } else if (typeof config.initialStale === 'boolean') {\n        isStale = config.initialStale\n      } else {\n        isStale = typeof currentQuery.state.data === 'undefined'\n      }\n    } else {\n      isStale = currentQuery.isStaleByTime(config.staleTime)\n    }\n\n    return {\n      ...getStatusProps(status),\n      canFetchMore: state.canFetchMore,\n      clear: this.clear,\n      data,\n      error: state.error,\n      failureCount: state.failureCount,\n      fetchMore: this.fetchMore,\n      isFetched: state.isFetched,\n      isFetching: state.isFetching,\n      isFetchingMore: state.isFetchingMore,\n      isStale,\n      query: currentQuery,\n      refetch: this.refetch,\n      updatedAt,\n    }\n  }\n\n  private updateQuery(): boolean {\n    const prevQuery = this.currentQuery\n\n    // Remove the initial data when there is an existing query\n    // because this data should not be used for a new query\n    const config =\n      this.config.keepPreviousData && prevQuery\n        ? { ...this.config, initialData: undefined }\n        : this.config\n\n    const newQuery = this.queryCache.buildQuery(config.queryKey, config)\n\n    if (newQuery === prevQuery) {\n      return false\n    }\n\n    this.previousResult = this.currentResult\n    this.currentQuery = newQuery\n    this.currentResult = this.createResult()\n\n    if (this.started) {\n      prevQuery?.unsubscribeObserver(this)\n      this.currentQuery.subscribeObserver(this)\n    }\n\n    return true\n  }\n\n  onQueryUpdate(\n    _state: QueryState<TResult, TError>,\n    action: Action<TResult, TError>\n  ): void {\n    const { config } = this\n\n    // Store current result and get new result\n    const prevResult = this.currentResult\n    this.currentResult = this.createResult()\n    const result = this.currentResult\n\n    // We need to check the action because the state could have\n    // transitioned from success to success in case of `setQueryData`.\n    if (action.type === 'Success' && result.isSuccess) {\n      config.onSuccess?.(result.data!)\n      config.onSettled?.(result.data!, null)\n      this.updateTimers()\n    } else if (action.type === 'Error' && result.isError) {\n      config.onError?.(result.error!)\n      config.onSettled?.(undefined, result.error!)\n      this.updateTimers()\n    }\n\n    // Decide if we need to notify the listener\n    const notify =\n      // Always notify on data or error change\n      result.data !== prevResult.data ||\n      result.error !== prevResult.error ||\n      // Maybe notify on other changes\n      config.notifyOnStatusChange\n\n    if (notify) {\n      this.updateListener?.(result)\n    }\n  }\n}\n","import {\n  CancelledError,\n  Console,\n  Updater,\n  functionalUpdate,\n  getStatusProps,\n  isCancelable,\n  isCancelledError,\n  isDocumentVisible,\n  isOnline,\n  isServer,\n  replaceEqualDeep,\n  sleep,\n} from './utils'\nimport {\n  ArrayQueryKey,\n  InitialDataFunction,\n  IsFetchingMoreValue,\n  QueryConfig,\n  QueryFunction,\n  QueryStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport { QueryObserver, UpdateListener } from './queryObserver'\n\n// TYPES\n\ninterface QueryInitConfig<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  notifyGlobalListeners: (query: Query<TResult, TError>) => void\n}\n\nexport interface QueryState<TResult, TError> {\n  canFetchMore?: boolean\n  data?: TResult\n  error: TError | null\n  failureCount: number\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  status: QueryStatus\n  throwInErrorBoundary?: boolean\n  updatedAt: number\n}\n\ninterface FetchOptions {\n  fetchMore?: FetchMoreOptions\n}\n\nexport interface FetchMoreOptions {\n  fetchMoreVariable?: unknown\n  previous: boolean\n}\n\nexport interface RefetchOptions {\n  throwOnError?: boolean\n}\n\nexport enum ActionType {\n  Failed = 'Failed',\n  Fetch = 'Fetch',\n  Success = 'Success',\n  Error = 'Error',\n}\n\ninterface FailedAction {\n  type: ActionType.Failed\n}\n\ninterface FetchAction {\n  type: ActionType.Fetch\n  isFetchingMore?: IsFetchingMoreValue\n}\n\ninterface SuccessAction<TResult> {\n  type: ActionType.Success\n  data: TResult | undefined\n  canFetchMore?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: ActionType.Error\n  error: TError\n}\n\nexport type Action<TResult, TError> =\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | SuccessAction<TResult>\n\n// CLASS\n\nexport class Query<TResult, TError> {\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  observers: QueryObserver<TResult, TError>[]\n  state: QueryState<TResult, TError>\n  cacheTime: number\n\n  private queryCache: QueryCache\n  private promise?: Promise<TResult | undefined>\n  private gcTimeout?: number\n  private cancelFetch?: () => void\n  private continueFetch?: () => void\n  private isTransportCancelable?: boolean\n  private notifyGlobalListeners: (query: Query<TResult, TError>) => void\n\n  constructor(init: QueryInitConfig<TResult, TError>) {\n    this.config = init.config\n    this.queryCache = init.queryCache\n    this.queryKey = init.queryKey\n    this.queryHash = init.queryHash\n    this.notifyGlobalListeners = init.notifyGlobalListeners\n    this.observers = []\n    this.state = getDefaultState(init.config)\n    this.cacheTime = init.config.cacheTime!\n    this.scheduleGc()\n  }\n\n  private updateConfig(config: QueryConfig<TResult, TError>): void {\n    this.config = config\n    this.cacheTime = Math.max(this.cacheTime, config.cacheTime || 0)\n  }\n\n  private dispatch(action: Action<TResult, TError>): void {\n    this.state = queryReducer(this.state, action)\n\n    this.observers.forEach(observer => {\n      observer.onQueryUpdate(this.state, action)\n    })\n\n    this.notifyGlobalListeners(this)\n  }\n\n  private scheduleGc(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearGcTimeout()\n\n    if (this.cacheTime === Infinity || this.observers.length > 0) {\n      return\n    }\n\n    this.gcTimeout = setTimeout(() => {\n      this.clear()\n    }, this.cacheTime)\n  }\n\n  cancel(): void {\n    this.cancelFetch?.()\n  }\n\n  private continue(): void {\n    this.continueFetch?.()\n  }\n\n  private clearTimersObservers(): void {\n    this.observers.forEach(observer => {\n      observer.clearTimers()\n    })\n  }\n\n  private clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  setData(updater: Updater<TResult | undefined, TResult>): void {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data: TResult | undefined = functionalUpdate(updater, prevData)\n\n    // Structurally share data between prev and new data if needed\n    if (this.config.structuralSharing) {\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.config.isDataEqual?.(prevData, data)) {\n      data = prevData\n    }\n\n    // Try to determine if more data can be fetched\n    const canFetchMore = hasMorePages(this.config, data)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      type: ActionType.Success,\n      data,\n      canFetchMore,\n    })\n  }\n\n  clear(): void {\n    this.queryCache.removeQuery(this)\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.clearTimersObservers()\n    this.cancel()\n  }\n\n  isEnabled(): boolean {\n    return this.observers.some(observer => observer.config.enabled)\n  }\n\n  isStale(): boolean {\n    return this.observers.some(observer => observer.isStale())\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      !this.state.isSuccess || this.state.updatedAt + staleTime <= Date.now()\n    )\n  }\n\n  async onWindowFocus(): Promise<void> {\n    if (\n      this.observers.some(\n        observer =>\n          observer.isStale() &&\n          observer.config.enabled &&\n          observer.config.refetchOnWindowFocus\n      )\n    ) {\n      try {\n        await this.fetch()\n      } catch {\n        // ignore\n      }\n    }\n\n    this.continue()\n  }\n\n  async onOnline(): Promise<void> {\n    if (\n      this.observers.some(\n        observer =>\n          observer.isStale() &&\n          observer.config.enabled &&\n          observer.config.refetchOnReconnect\n      )\n    ) {\n      try {\n        await this.fetch()\n      } catch {\n        // ignore\n      }\n    }\n\n    this.continue()\n  }\n\n  subscribe(\n    listener?: UpdateListener<TResult, TError>\n  ): QueryObserver<TResult, TError> {\n    const observer = new QueryObserver<TResult, TError>({\n      queryCache: this.queryCache,\n      queryKey: this.queryKey,\n      ...this.config,\n    })\n\n    observer.subscribe(listener)\n\n    return observer\n  }\n\n  subscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers.push(observer)\n\n    // Stop the query from being garbage collected\n    this.clearGcTimeout()\n  }\n\n  unsubscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    if (!this.observers.length) {\n      // If the transport layer does not support cancellation\n      // we'll let the query continue so the result can be cached\n      if (this.isTransportCancelable) {\n        this.cancel()\n      }\n    }\n\n    this.scheduleGc()\n  }\n\n  async refetch(\n    options?: RefetchOptions,\n    config?: QueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    try {\n      return await this.fetch(undefined, config)\n    } catch (error) {\n      if (options?.throwOnError === true) {\n        throw error\n      }\n    }\n  }\n\n  async fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions,\n    config?: QueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    return this.fetch(\n      {\n        fetchMore: {\n          fetchMoreVariable,\n          previous: options?.previous || false,\n        },\n      },\n      config\n    )\n  }\n\n  async fetch(\n    options?: FetchOptions,\n    config?: QueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    // If we are already fetching, return current promise\n    if (this.promise) {\n      return this.promise\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (config) {\n      this.updateConfig(config)\n    }\n\n    config = this.config\n\n    // Check if there is a query function\n    if (typeof config.queryFn !== 'function') {\n      return\n    }\n\n    // Get the query function params\n    const filter = config.queryFnParamsFilter\n    const params = filter ? filter(this.queryKey) : this.queryKey\n\n    this.promise = (async () => {\n      try {\n        let data: any\n\n        if (config.infinite) {\n          data = await this.startInfiniteFetch(config, params, options)\n        } else {\n          data = await this.startFetch(config, params, options)\n        }\n\n        // Set success state\n        this.setData(data)\n\n        // Cleanup\n        delete this.promise\n\n        // Return data\n        return data\n      } catch (error) {\n        // Set error state\n        this.dispatch({\n          type: ActionType.Error,\n          error,\n        })\n\n        // Log error\n        if (!isCancelledError(error)) {\n          Console.error(error)\n        }\n\n        // Cleanup\n        delete this.promise\n\n        // Propagate error\n        throw error\n      }\n    })()\n\n    return this.promise\n  }\n\n  private async startFetch(\n    config: QueryConfig<TResult, TError>,\n    params: unknown[],\n    _options?: FetchOptions\n  ): Promise<TResult> {\n    // Create function to fetch the data\n    const fetchData = () => config.queryFn!(...params)\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch })\n    }\n\n    // Try to fetch the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  private async startInfiniteFetch(\n    config: QueryConfig<TResult, TError>,\n    params: unknown[],\n    options?: FetchOptions\n  ): Promise<TResult[]> {\n    const fetchMore = options?.fetchMore\n    const { previous, fetchMoreVariable } = fetchMore || {}\n    const isFetchingMore = fetchMore ? (previous ? 'previous' : 'next') : false\n    const prevPages: TResult[] = (this.state.data as any) || []\n\n    // Create function to fetch a page\n    const fetchPage = async (\n      pages: TResult[],\n      prepend?: boolean,\n      cursor?: unknown\n    ) => {\n      const lastPage = getLastPage(pages, prepend)\n\n      if (\n        typeof cursor === 'undefined' &&\n        typeof lastPage !== 'undefined' &&\n        config.getFetchMore\n      ) {\n        cursor = config.getFetchMore(lastPage, pages)\n      }\n\n      const page = await config.queryFn!(...params, cursor)\n\n      return prepend ? [page, ...pages] : [...pages, page]\n    }\n\n    // Create function to fetch the data\n    const fetchData = () => {\n      if (isFetchingMore) {\n        return fetchPage(prevPages, previous, fetchMoreVariable)\n      } else if (!prevPages.length) {\n        return fetchPage([])\n      } else {\n        let promise = fetchPage([])\n        for (let i = 1; i < prevPages.length; i++) {\n          promise = promise.then(fetchPage)\n        }\n        return promise\n      }\n    }\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch, isFetchingMore })\n    }\n\n    // Try to get the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  private async tryFetchData<T>(\n    config: QueryConfig<TResult, TError>,\n    fn: QueryFunction<T>\n  ): Promise<T> {\n    return new Promise<T>((outerResolve, outerReject) => {\n      let resolved = false\n      let continueLoop: () => void\n      let cancelTransport: () => void\n\n      const done = () => {\n        resolved = true\n\n        delete this.cancelFetch\n        delete this.continueFetch\n        delete this.isTransportCancelable\n\n        // End loop if currently paused\n        continueLoop?.()\n      }\n\n      const resolve = (value: any) => {\n        done()\n        outerResolve(value)\n      }\n\n      const reject = (value: any) => {\n        done()\n        outerReject(value)\n      }\n\n      // Create callback to cancel this fetch\n      this.cancelFetch = () => {\n        reject(new CancelledError())\n        try {\n          cancelTransport?.()\n        } catch {}\n      }\n\n      // Create callback to continue this fetch\n      this.continueFetch = () => {\n        continueLoop?.()\n      }\n\n      // Create loop function\n      const run = async () => {\n        try {\n          // Execute query\n          const promiseOrValue = fn()\n\n          // Check if the transport layer support cancellation\n          if (isCancelable(promiseOrValue)) {\n            cancelTransport = () => {\n              promiseOrValue.cancel()\n            }\n            this.isTransportCancelable = true\n          }\n\n          // Await data\n          resolve(await promiseOrValue)\n        } catch (error) {\n          // Stop if the fetch is already resolved\n          if (resolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const { failureCount } = this.state\n          const { retry, retryDelay } = config\n\n          const shouldRetry =\n            retry === true ||\n            failureCount < retry! ||\n            (typeof retry === 'function' && retry(failureCount, error))\n\n          if (!shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          // Increase the failureCount\n          this.dispatch({ type: ActionType.Failed })\n\n          // Delay\n          await sleep(functionalUpdate(retryDelay, failureCount) || 0)\n\n          // Pause retry if the document is not visible or when the device is offline\n          if (!isDocumentVisible() || !isOnline()) {\n            await new Promise(continueResolve => {\n              continueLoop = continueResolve\n            })\n          }\n\n          // Try again if not resolved yet\n          if (!resolved) {\n            run()\n          }\n        }\n      }\n\n      // Start loop\n      run()\n    })\n  }\n}\n\nfunction getLastPage<TResult>(pages: TResult[], previous?: boolean): TResult {\n  return previous ? pages[0] : pages[pages.length - 1]\n}\n\nfunction hasMorePages<TResult, TError>(\n  config: QueryConfig<TResult, TError>,\n  pages: unknown,\n  previous?: boolean\n): boolean | undefined {\n  if (config.infinite && config.getFetchMore && Array.isArray(pages)) {\n    return Boolean(config.getFetchMore(getLastPage(pages, previous), pages))\n  }\n}\n\nfunction getDefaultState<TResult, TError>(\n  config: QueryConfig<TResult, TError>\n): QueryState<TResult, TError> {\n  const initialData =\n    typeof config.initialData === 'function'\n      ? (config.initialData as InitialDataFunction<TResult>)()\n      : config.initialData\n\n  const hasInitialData = typeof initialData !== 'undefined'\n\n  const initialStatus = hasInitialData\n    ? QueryStatus.Success\n    : config.enabled\n    ? QueryStatus.Loading\n    : QueryStatus.Idle\n\n  return {\n    ...getStatusProps(initialStatus),\n    error: null,\n    isFetched: false,\n    isFetching: initialStatus === QueryStatus.Loading,\n    isFetchingMore: false,\n    failureCount: 0,\n    data: initialData,\n    updatedAt: Date.now(),\n    canFetchMore: hasMorePages(config, initialData),\n  }\n}\n\nexport function queryReducer<TResult, TError>(\n  state: QueryState<TResult, TError>,\n  action: Action<TResult, TError>\n): QueryState<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Failed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case ActionType.Fetch:\n      const status =\n        typeof state.data !== 'undefined'\n          ? QueryStatus.Success\n          : QueryStatus.Loading\n      return {\n        ...state,\n        ...getStatusProps(status),\n        isFetching: true,\n        isFetchingMore: action.isFetchingMore || false,\n        failureCount: 0,\n      }\n    case ActionType.Success:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n        isFetched: true,\n        isFetching: false,\n        isFetchingMore: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case ActionType.Error:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Error),\n        error: action.error,\n        isFetched: true,\n        isFetching: false,\n        isFetchingMore: false,\n        failureCount: state.failureCount + 1,\n        throwInErrorBoundary: true,\n      }\n    default:\n      return state\n  }\n}\n","import {\n  Updater,\n  deepIncludes,\n  functionalUpdate,\n  getQueryArgs,\n  isDocumentVisible,\n  isObject,\n  isOnline,\n  isServer,\n} from './utils'\nimport { getDefaultedQueryConfig } from './config'\nimport { Query } from './query'\nimport {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  ReactQueryConfig,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from './types'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  frozen?: boolean\n  defaultConfig?: ReactQueryConfig\n}\n\ninterface ClearOptions {\n  notify?: boolean\n}\n\ninterface PrefetchQueryOptions {\n  force?: boolean\n  throwOnError?: boolean\n}\n\ninterface InvalidateQueriesOptions extends QueryPredicateOptions {\n  refetchActive?: boolean\n  refetchInactive?: boolean\n  throwOnError?: boolean\n}\n\ninterface QueryPredicateOptions {\n  exact?: boolean\n}\n\ntype QueryPredicate = QueryKey | QueryPredicateFn | true\n\ntype QueryPredicateFn = (query: Query<unknown, unknown>) => boolean\n\nexport interface PrefetchQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n  options?: PrefetchQueryOptions\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (\n  cache: QueryCache,\n  query?: Query<unknown, unknown>\n) => void\n\n// CLASS\n\nexport class QueryCache {\n  isFetching: number\n\n  private config: QueryCacheConfig\n  private globalListeners: QueryCacheListener[]\n  private queries: QueryHashMap\n  private queriesArray: Query<any, any>[]\n\n  constructor(config?: QueryCacheConfig) {\n    this.config = config || {}\n\n    // A frozen cache does not add new queries to the cache\n    this.globalListeners = []\n\n    this.queries = {}\n    this.queriesArray = []\n    this.isFetching = 0\n  }\n\n  private notifyGlobalListeners(query?: Query<any, any>) {\n    this.isFetching = this.getQueries().reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    this.globalListeners.forEach(listener => {\n      listener(this, query)\n    })\n  }\n\n  getDefaultConfig() {\n    return this.config.defaultConfig\n  }\n\n  getDefaultedQueryConfig<TResult, TError>(\n    config?: QueryConfig<TResult, TError>\n  ): QueryConfig<TResult, TError> {\n    return getDefaultedQueryConfig(this.getDefaultConfig(), undefined, config, {\n      queryCache: this,\n    })\n  }\n\n  subscribe(listener: QueryCacheListener): () => void {\n    this.globalListeners.push(listener)\n    return () => {\n      this.globalListeners = this.globalListeners.filter(x => x !== listener)\n    }\n  }\n\n  clear(options?: ClearOptions): void {\n    this.removeQueries()\n    if (options?.notify) {\n      this.notifyGlobalListeners()\n    }\n  }\n\n  getQueries<TResult = unknown, TError = unknown>(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): Query<TResult, TError>[] {\n    if (predicate === true || typeof predicate === 'undefined') {\n      return this.queriesArray\n    }\n\n    let predicateFn: QueryPredicateFn\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate as QueryPredicateFn\n    } else {\n      const config = this.getDefaultedQueryConfig()\n      const [queryHash, queryKey] = config.queryKeySerializerFn!(predicate)\n\n      predicateFn = d =>\n        options?.exact\n          ? d.queryHash === queryHash\n          : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return this.queriesArray.filter(predicateFn)\n  }\n\n  getQuery<TResult, TError = unknown>(\n    predicate: QueryPredicate\n  ): Query<TResult, TError> | undefined {\n    return this.getQueries<TResult, TError>(predicate, { exact: true })[0]\n  }\n\n  getQueryData<TResult>(predicate: QueryPredicate): TResult | undefined {\n    return this.getQuery<TResult>(predicate)?.state.data\n  }\n\n  removeQuery(query: Query<any, any>): void {\n    if (this.queries[query.queryHash]) {\n      query.destroy()\n      delete this.queries[query.queryHash]\n      this.queriesArray = this.queriesArray.filter(x => x !== query)\n      this.notifyGlobalListeners(query)\n    }\n  }\n\n  removeQueries(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => {\n      this.removeQuery(query)\n    })\n  }\n\n  cancelQueries(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => {\n      query.cancel()\n    })\n  }\n\n  async invalidateQueries(\n    predicate?: QueryPredicate,\n    options?: InvalidateQueriesOptions\n  ): Promise<void> {\n    const { refetchActive = true, refetchInactive = false, throwOnError } =\n      options || {}\n\n    try {\n      await Promise.all(\n        this.getQueries(predicate, options).map(query => {\n          const enabled = query.isEnabled()\n\n          if ((enabled && refetchActive) || (!enabled && refetchInactive)) {\n            return query.fetch()\n          }\n\n          return undefined\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  resetErrorBoundaries(): void {\n    this.getQueries().forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  buildQuery<TResult, TError = unknown>(\n    userQueryKey: QueryKey,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): Query<TResult, TError> {\n    const config = this.getDefaultedQueryConfig(queryConfig)\n    const [queryHash, queryKey] = config.queryKeySerializerFn!(userQueryKey)\n\n    if (this.queries[queryHash]) {\n      return this.queries[queryHash] as Query<TResult, TError>\n    }\n\n    const query = new Query<TResult, TError>({\n      queryCache: this,\n      queryKey,\n      queryHash,\n      config,\n      notifyGlobalListeners: query => {\n        this.notifyGlobalListeners(query)\n      },\n    })\n\n    if (!this.config.frozen) {\n      this.queries[queryHash] = query\n      this.queriesArray.push(query)\n      this.notifyGlobalListeners(query)\n    }\n\n    return query\n  }\n\n  // Parameter syntax with optional prefetch options\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function, config and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Object syntax\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    config: PrefetchQueryObjectConfig<TResult, TError>\n  ): Promise<TResult | undefined>\n\n  // Implementation\n  async prefetchQuery<TResult, TError>(\n    ...args: any[]\n  ): Promise<TResult | undefined> {\n    if (\n      isObject(args[1]) &&\n      (args[1].hasOwnProperty('throwOnError') ||\n        args[1].hasOwnProperty('force'))\n    ) {\n      args[3] = args[1]\n      args[1] = undefined\n      args[2] = undefined\n    }\n\n    const [queryKey, config, options] = getQueryArgs<\n      TResult,\n      TError,\n      PrefetchQueryOptions | undefined\n    >(args)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    const configWithoutRetry = this.getDefaultedQueryConfig({\n      retry: false,\n      ...config,\n    })\n\n    let query\n    try {\n      query = this.buildQuery<TResult, TError>(queryKey, configWithoutRetry)\n      if (options?.force || query.isStaleByTime(config.staleTime)) {\n        await query.fetch(undefined, configWithoutRetry)\n      }\n      return query.state.data\n    } catch (error) {\n      if (options?.throwOnError) {\n        throw error\n      }\n    }\n  }\n\n  setQueryData<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    updater: Updater<TResult | undefined, TResult>,\n    config?: QueryConfig<TResult, TError>\n  ) {\n    const query = this.getQuery<TResult, TError>(queryKey)\n\n    if (query) {\n      query.setData(updater)\n      return\n    }\n\n    this.buildQuery<TResult, TError>(queryKey, {\n      initialStale: typeof config?.staleTime === 'undefined',\n      initialData: functionalUpdate(updater, undefined),\n      ...config,\n    })\n  }\n}\n\nconst defaultQueryCache = makeQueryCache({ frozen: isServer })\nexport { defaultQueryCache as queryCache }\nexport const queryCaches = [defaultQueryCache]\n\nexport function makeQueryCache(config?: QueryCacheConfig) {\n  return new QueryCache(config)\n}\n\nexport function onVisibilityOrOnlineChange(isOnlineChange: boolean) {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache => {\n      queryCache.getQueries().forEach(query => {\n        if (isOnlineChange) {\n          query.onOnline()\n        } else {\n          query.onWindowFocus()\n        }\n      })\n    })\n  }\n}\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setFocusHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange(false)\n)\n\nsetFocusHandler(handleFocus => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to visibillitychange and focus\n  window.addEventListener('visibilitychange', handleFocus, false)\n  window.addEventListener('focus', handleFocus, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('visibilitychange', handleFocus)\n    window.removeEventListener('focus', handleFocus)\n  }\n})\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setOnlineHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange(true)\n)\n\nsetOnlineHandler(handleOnline => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to online\n  window.addEventListener('online', handleOnline, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('online', handleOnline)\n  }\n})\n","import React from 'react'\n\nimport {\n  queryCache as defaultQueryCache,\n  queryCaches,\n  makeQueryCache,\n} from '../core'\nimport { QueryCache } from '../core/queryCache'\n\nexport const queryCacheContext = React.createContext(defaultQueryCache)\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport interface ReactQueryCacheProviderProps {\n  queryCache?: QueryCache\n}\n\nexport const ReactQueryCacheProvider: React.FC<ReactQueryCacheProviderProps> = ({\n  queryCache,\n  children,\n}) => {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { mergeReactQueryConfigs } from '../core/config'\nimport { ReactQueryConfig } from '../core/types'\n\nconst configContext = React.createContext<ReactQueryConfig | undefined>(\n  undefined\n)\n\nexport function useContextConfig() {\n  return React.useContext(configContext)\n}\n\nexport interface ReactQueryConfigProviderProps {\n  config: ReactQueryConfig\n}\n\nexport const ReactQueryConfigProvider: React.FC<ReactQueryConfigProviderProps> = ({\n  config,\n  children,\n}) => {\n  const parentConfig = useContextConfig()\n\n  const mergedConfig = React.useMemo(\n    () =>\n      parentConfig ? mergeReactQueryConfigs(parentConfig, config) : config,\n    [config, parentConfig]\n  )\n\n  return (\n    <configContext.Provider value={mergedConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { useDefaultedMutationConfig } from './useDefaultedMutationConfig'\nimport { useGetLatest, useMountedCallback } from './utils'\nimport { Console, uid, getStatusProps } from '../core/utils'\nimport {\n  QueryStatus,\n  MutationResultPair,\n  MutationFunction,\n  MutationConfig,\n  MutateConfig,\n} from '../core/types'\n\n// TYPES\n\ntype Reducer<S, A> = (prevState: S, action: A) => S\n\ninterface State<TResult, TError> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nenum ActionType {\n  Reset = 'Reset',\n  Loading = 'Loading',\n  Resolve = 'Resolve',\n  Reject = 'Reject',\n}\n\ninterface ResetAction {\n  type: ActionType.Reset\n}\n\ninterface LoadingAction {\n  type: ActionType.Loading\n}\n\ninterface ResolveAction<TResult> {\n  type: ActionType.Resolve\n  data: TResult\n}\n\ninterface RejectAction<TError> {\n  type: ActionType.Reject\n  error: TError\n}\n\ntype Action<TResult, TError> =\n  | ResetAction\n  | LoadingAction\n  | ResolveAction<TResult>\n  | RejectAction<TError>\n\n// HOOK\n\nconst getDefaultState = (): State<any, any> => ({\n  ...getStatusProps(QueryStatus.Idle),\n  data: undefined,\n  error: null,\n})\n\nfunction mutationReducer<TResult, TError>(\n  state: State<TResult, TError>,\n  action: Action<TResult, TError>\n): State<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState()\n    case ActionType.Loading:\n      return {\n        ...getStatusProps(QueryStatus.Loading),\n        data: undefined,\n        error: null,\n      }\n    case ActionType.Resolve:\n      return {\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n      }\n    case ActionType.Reject:\n      return {\n        ...getStatusProps(QueryStatus.Error),\n        data: undefined,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nexport function useMutation<\n  TResult,\n  TError = unknown,\n  TVariables = undefined,\n  TSnapshot = unknown\n>(\n  mutationFn: MutationFunction<TResult, TVariables>,\n  config: MutationConfig<TResult, TError, TVariables, TSnapshot> = {}\n): MutationResultPair<TResult, TError, TVariables, TSnapshot> {\n  config = useDefaultedMutationConfig(config)\n  const getConfig = useGetLatest(config)\n\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer as Reducer<State<TResult, TError>, Action<TResult, TError>>,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const latestMutationRef = React.useRef<number>()\n\n  const mutate = React.useCallback(\n    async (\n      variables?: TVariables,\n      mutateConfig: MutateConfig<TResult, TError, TVariables, TSnapshot> = {}\n    ): Promise<TResult | undefined> => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue: TSnapshot | undefined\n\n      try {\n        dispatch({ type: ActionType.Loading })\n        snapshotValue = (await config.onMutate?.(variables!)) as TSnapshot\n\n        const data = await getMutationFn()(variables!)\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Resolve, data })\n        }\n\n        await config.onSuccess?.(data, variables!)\n        await mutateConfig.onSuccess?.(data, variables!)\n        await config.onSettled?.(data, null, variables!)\n        await mutateConfig.onSettled?.(data, null, variables!)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await config.onError?.(error, variables!, snapshotValue!)\n        await mutateConfig.onError?.(error, variables!, snapshotValue!)\n        await config.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue as TSnapshot\n        )\n        await mutateConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue\n        )\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Reject, error })\n        }\n\n        if (mutateConfig.throwOnError ?? config.throwOnError) {\n          throw error\n        }\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => {\n    dispatch({ type: ActionType.Reset })\n  }, [dispatch])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import React from 'react'\n\nimport { isServer } from '../core/utils'\n\nexport function useGetLatest<T>(obj: T): () => T {\n  const ref = React.useRef<T>(obj)\n  ref.current = obj\n  return React.useCallback(() => ref.current, [])\n}\n\nfunction useIsMounted(): () => boolean {\n  const mountedRef = React.useRef(false)\n  const isMounted = React.useCallback(() => mountedRef.current, [])\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return isMounted\n}\n\nexport function useMountedCallback<T extends Function>(callback: T): T {\n  const isMounted = useIsMounted()\n  return (React.useCallback(\n    (...args: any[]) => {\n      if (isMounted()) {\n        return callback(...args)\n      }\n    },\n    [callback, isMounted]\n  ) as any) as T\n}\n\n/**\n * This hook is a safe useState version which schedules state updates in microtasks\n * to prevent updating a component state while React is rendering different components\n * or when the component is not mounted anymore.\n */\nexport function useSafeState<S>(\n  initialState: S | (() => S)\n): [S, React.Dispatch<React.SetStateAction<S>>] {\n  const isMounted = useIsMounted()\n  const [state, setState] = React.useState(initialState)\n\n  const safeSetState = React.useCallback(\n    (value: React.SetStateAction<S>) => {\n      scheduleMicrotask(() => {\n        if (isMounted()) {\n          setState(value)\n        }\n      })\n    },\n    [isMounted]\n  )\n\n  return [state, safeSetState]\n}\n\nexport function useRerenderer() {\n  const [, setState] = useSafeState({})\n  return React.useCallback(() => setState({}), [setState])\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nfunction scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { MutationConfig } from '../core/types'\nimport { getDefaultedMutationConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedMutationConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import React from 'react'\n\nimport { useRerenderer } from './utils'\nimport { QueryObserver } from '../core/queryObserver'\nimport { QueryResultBase, QueryObserverConfig } from '../core/types'\nimport { useDefaultedQueryConfig } from './useDefaultedQueryConfig'\n\nexport function useBaseQuery<TResult, TError>(\n  config: QueryObserverConfig<TResult, TError> = {}\n): QueryResultBase<TResult, TError> {\n  config = useDefaultedQueryConfig(config)\n\n  // Make a rerender function\n  const rerender = useRerenderer()\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<TResult, TError>>()\n  const firstRender = !observerRef.current\n  const observer = observerRef.current || new QueryObserver(config)\n  observerRef.current = observer\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(() => {\n        rerender()\n      }),\n    [observer, rerender]\n  )\n\n  // Update config\n  if (!firstRender) {\n    observer.updateConfig(config)\n  }\n\n  const result = observer.getCurrentResult()\n\n  // Handle suspense\n  if (config.suspense || config.useErrorBoundary) {\n    if (result.isError && result.query.state.throwInErrorBoundary) {\n      throw result.error\n    }\n\n    if (config.enabled && config.suspense && !result.isSuccess) {\n      const unsubscribe = observer.subscribe()\n      throw observer.fetch().finally(unsubscribe)\n    }\n  }\n\n  return result\n}\n","import { QueryConfig } from '../core/types'\nimport { getDefaultedQueryConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedQueryConfig<TResult, TError>(\n  config?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedQueryConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import {\n  InfiniteQueryConfig,\n  InfiniteQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseInfiniteQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: InfiniteQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Object syntax\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Implementation\nexport function useInfiniteQuery<TResult, TError>(\n  ...args: any[]\n): InfiniteQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult[], TError>(args)[1]\n  return useBaseQuery<TResult[], TError>({ ...config, infinite: true })\n}\n","import React from 'react'\n\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useSafeState } from './utils'\n\nexport function useIsFetching(): number {\n  const queryCache = useQueryCache()\n\n  const [isFetching, setIsFetching] = useSafeState(queryCache.isFetching)\n\n  React.useEffect(\n    () =>\n      queryCache.subscribe(() => {\n        setIsFetching(queryCache.isFetching)\n      }),\n    [queryCache, setIsFetching]\n  )\n\n  return isFetching\n}\n","import {\n  PaginatedQueryConfig,\n  PaginatedQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n\n// TYPES\n\nexport interface UsePaginatedQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: PaginatedQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Object syntax\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Implementation\nexport function usePaginatedQuery<TResult, TError>(\n  ...args: any[]\n): PaginatedQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  const result = useBaseQuery<TResult, TError>({\n    ...config,\n    keepPreviousData: true,\n  })\n  return {\n    ...result,\n    resolvedData: result.data,\n    latestData:\n      result.query.state.data === result.data ? result.data : undefined,\n  }\n}\n","import {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  QueryResult,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Object syntax\nexport function useQuery<TResult = unknown, TError = unknown>(\n  config: UseQueryObjectConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Implementation\nexport function useQuery<TResult, TError>(\n  ...args: any[]\n): QueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  return useBaseQuery<TResult, TError>(config)\n}\n"],"names":["QueryStatus","CancelledError","_uid","isServer","window","noop","Console","console","error","warn","log","functionalUpdate","updater","input","stableStringifyReplacer","_key","value","Error","isObject","Object","keys","sort","reduce","result","key","isDocumentVisible","document","undefined","includes","visibilityState","isOnline","navigator","onLine","getQueryArgs","args","queryKey","queryFn","config","options","a","Array","isArray","isPlainObject","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","toString","call","isCancelledError","getStatusProps","status","isLoading","Loading","isSuccess","Success","isError","isIdle","Idle","createSetHandler","fn","removePreviousHandler","callback","DEFAULT_CONFIG","queries","queryKeySerializerFn","arrayQueryKey","queryHash","JSON","stringify","parse","enabled","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","notifyOnStatusChange","structuralSharing","getDefaultedQueryConfig","queryCacheConfig","contextConfig","configOverrides","shared","then","direct","Promise","resolve","ActionType","QueryObserver","queryCache","clear","this","bind","refetch","fetchMore","updateQuery","subscribe","listener","started","updateListener","currentQuery","subscribeObserver","optionalFetch","updateTimers","unsubscribe","clearTimers","unsubscribeObserver","updateConfig","prevConfig","updated","updateStaleTimeout","refetchInterval","refetchIntervalInBackground","updateRefetchInterval","isStale","currentResult","getCurrentResult","fetchMoreVariable","fetch","body","recover","e","_this5","suspense","isFetched","observers","length","updateIsStale","isStaleByTime","createResult","clearStaleTimeout","updatedAt","Infinity","timeUntilStale","Date","now","timeout","max","staleTimeoutId","setTimeout","_this6","clearRefetchInterval","refetchIntervalId","setInterval","_this7","clearInterval","previousResult","state","data","keepPreviousData","initialStale","canFetchMore","failureCount","isFetching","isFetchingMore","query","prevQuery","initialData","newQuery","buildQuery","onQueryUpdate","_state","action","prevResult","type","onSuccess","onSettled","onError","f","i","arguments","apply","reject","Query","init","initialStatus","notifyGlobalListeners","hasMorePages","scheduleGc","dispatch","Failed","Fetch","throwInErrorBoundary","queryReducer","forEach","observer","_this","clearGcTimeout","gcTimeout","_this2","cancel","cancelFetch","continue","continueFetch","clearTimersObservers","clearTimeout","setData","prevData","replaceEqualDeep","b","array","aSize","bItems","bSize","copy","equalItems","isDataEqual","_this$config$isDataEq","removeQuery","destroy","isEnabled","some","onWindowFocus","_this4","onOnline","push","filter","x","isTransportCancelable","_this8","throwOnError","previous","_this12","promise","queryFnParamsFilter","params","_async","infinite","startInfiniteFetch","startFetch","_options","tryFetchData","prevPages","fetchPage","pages","prepend","cursor","lastPage","getLastPage","getFetchMore","page","outerResolve","outerReject","continueLoop","cancelTransport","resolved","done","_this18","run","promiseOrValue","continueResolve","Boolean","QueryCache","globalListeners","queriesArray","getQueries","acc","getDefaultConfig","defaultConfig","removeQueries","notify","predicate","predicateFn","d","exact","deepIncludes","getQuery","getQueryData","_this$getQuery","_this3","cancelQueries","invalidateQueries","refetchActive","refetchInactive","all","map","err","resetErrorBoundaries","userQueryKey","queryConfig","frozen","prefetchQuery","configWithoutRetry","force","setQueryData","defaultQueryCache","makeQueryCache","queryCaches","onVisibilityOrOnlineChange","isOnlineChange","setFocusHandler","handleFocus","_window","addEventListener","removeEventListener","setOnlineHandler","handleOnline","queryCacheContext","React","createContext","useQueryCache","useContext","configContext","useContextConfig","useGetLatest","obj","ref","useRef","current","useCallback","useIsMounted","mountedRef","isMounted","useSafeState","initialState","useState","setState","catch","useDefaultedMutationConfig","contextQueryCache","mutations","getDefaultedMutationConfig","_await","getDefaultState","mutationReducer","Reset","Resolve","Reject","useBaseQuery","useDefaultedQueryConfig","rerender","observerRef","firstRender","useEffect","useErrorBoundary","finally","children","resolvedQueryCache","useMemo","indexOf","splice","Provider","parentConfig","mergedConfig","c","setIsFetching","mutationFn","getConfig","useReducer","unsafeDispatch","getMutationFn","latestMutationRef","mutate","variables","mutateConfig","mutationId","snapshotValue","isLatest","onMutate","reset","resolvedData","latestData"],"mappings":"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"}